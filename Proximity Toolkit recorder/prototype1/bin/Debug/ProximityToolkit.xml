<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProximityToolkit</name>
    </assembly>
    <members>
        <member name="T:ProximityToolkit.ITransformNode">
            <summary>
            Contracts a set of functionality for nodes in a transformation hierarchy.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Plane">
            <summary>
            Collision class representing an unbounded plane.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.CollisionBase">
            <summary>
            Base class for collision objects.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.ICollidible">
            <summary>
            Interface for collidible objects.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionBase.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Finds the properties of the collision with another collidible object.
            </summary>
            <param name="obj">The other collidible object to test.</param>
            <returns>The properties of the collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionBase.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionBase.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionBase.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.CollisionType">
            <summary>
            Returns the class type of the collision object representing this object.  This may simply return the type of this object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.CollisionObject">
            <summary>
            Returns the collision object representing this object.  This may simply return this object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.Name">
            <summary>
            A developer-defined name for this collision volume.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.GlobalTransform">
            <summary>
            The over all transformation effect that parent nodes have on this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.TransformParent">
            <summary>
            The parent node to this node in the transformation hierarchy.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionBase.LocalTransform">
            <summary>
            The relative transformation effect that this node has on child nodes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.Set(ProximityToolkit.Matrix)">
            <summary>
            Sets the plane geometry.
            </summary>
            <param name="newbasis">A matrix representing the new coordinate system.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the plane geometry.
            </summary>
            <param name="point">A point on the plane.</param>
            <param name="xaxis">A vector along the X-direction of the plane.</param>
            <param name="yaxis">A vector along the Y-direction of the plane.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.ToPlane(ProximityToolkit.Vector3)">
            <summary>
            Transforms a vector into this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.FromPlane(ProximityToolkit.Vector3)">
            <summary>
            Translates a vector out of this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Plane.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Plane.Basis">
            <summary>
            Gets or sets the coordinate transformation for this plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Plane.Normal">
            <summary>
            Returns a representative normal to the plane surface.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Plane.Point">
            <summary>
            Returns a representative point on the plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Plane.XAxis">
            <summary>
            Returns the X-axis that defines the plane coordinate space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Plane.YAxis">
            <summary>
            Returns the Y-axis that defines the plane coordinate space.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.CollisionDetails">
            <summary>
            The details of a collision between two ICollidible objects.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.Set(ProximityToolkit.Collision.ICollidible,ProximityToolkit.Collision.ICollidible)">
            <summary>
            Sets the two volumes and calculates the collision details.
            </summary>
            <param name="obj1">The first volumes.</param>
            <param name="obj2">The second volumes.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Point)">
            <summary>
            Calculates the collision between two Point volumes.
            </summary>
            <param name="point1">The first Point volume.</param>
            <param name="point2">The second Point volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Line)">
            <summary>
            Calculates the collision between a Point and a Line volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="line">The Line volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.LineSegment)">
            <summary>
            Calculates the collision between a Point and Line Segment volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="line">The Line Segment volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Ray)">
            <summary>
            Calculates the collision between a Point and Ray volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="line">The Ray volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Square)">
            <summary>
            Calculates the collision between a Point and Plane Square volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="plane">The Plane Square volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Plane)">
            <summary>
            Calculates the collision between a Point and Plane volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="plane">The Plane volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Sphere)">
            <summary>
            Calculates the collision between a Point and Sphere volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="sphere">The Sphere volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Point,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between a Point and Box volume.
            </summary>
            <param name="point">The Point volume.</param>
            <param name="box">The Box volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Line,ProximityToolkit.Collision.Line)">
            <summary>
            Calculates the collision between two Line volumes.
            </summary>
            <param name="line1">The first Line volume.</param>
            <param name="line2">The second Line volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Line,ProximityToolkit.Collision.Square)">
            <summary>
            Calculates the collision between a Line and Plane Square volume.
            </summary>
            <param name="line">The Line volume.</param>
            <param name="plane">The Plane Square volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Line,ProximityToolkit.Collision.Plane)">
            <summary>
            Calculates the collision between a Line and Plane volume.
            </summary>
            <param name="line">The Line volume.</param>
            <param name="plane">The Plane volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Line,ProximityToolkit.Collision.Sphere)">
            <summary>
            Calculates the collision between a Line and Sphere volume.
            </summary>
            <param name="line">The Line volume.</param>
            <param name="sphere">The Sphere volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Line,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between a Line and Box volume.
            </summary>
            <param name="line">The Line volume.</param>
            <param name="box">The Box volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Square,ProximityToolkit.Collision.Square)">
            <summary>
            Calculates the collision between two Plane Square volumes.
            </summary>
            <param name="plane1">The first Plane Square volume.</param>
            <param name="plane2">The second Plane Square volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Square,ProximityToolkit.Collision.Plane)">
            <summary>
            Calculate the collision between a Plane Square and Plane volume.
            </summary>
            <param name="plane1">The Plane Square volume.</param>
            <param name="plane2">The Plane volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Square,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between a Plane Square and a Box volume.
            </summary>
            <param name="plane">The Plane Square volume.</param>
            <param name="box">The Box volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Plane,ProximityToolkit.Collision.Plane)">
            <summary>
            Calculates the collision between two Plane volumes.
            </summary>
            <param name="plane1">The first Plane volume.</param>
            <param name="plane2">The second Plane volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Square,ProximityToolkit.Collision.Sphere)">
            <summary>
            Calculates the collision between a Plane Square and Sphere volume.
            </summary>
            <param name="plane">The Plane Square volume.</param>
            <param name="sphere">The Sphere volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Plane,ProximityToolkit.Collision.Sphere)">
            <summary>
            Calculates the collision between a Plane and Sphere volume.
            </summary>
            <param name="plane">The Plane volume.</param>
            <param name="sphere">The Sphere volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Plane,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between a Plane and Box volume.
            </summary>
            <param name="plane">The Plane volume.</param>
            <param name="box">The Box volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Sphere,ProximityToolkit.Collision.Sphere)">
            <summary>
            Calculates the collision between two Sphere volumes.
            </summary>
            <param name="sphere1">The first Sphere volume.</param>
            <param name="sphere2">The second Sphere volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Sphere,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between a Sphere and Box volume.
            </summary>
            <param name="sphere">The Sphere volume.</param>
            <param name="box">The Box volume.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionDetails.DetectCollision(ProximityToolkit.Collision.Box,ProximityToolkit.Collision.Box)">
            <summary>
            Calculates the collision between two Box volumes.
            </summary>
            <param name="box1">The first Box volume.</param>
            <param name="box2">The second Box volume.</param>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.Collides">
            <summary>
            Returns true if a collision occurs, false if not.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.Contains">
            <summary>
            Returns true if one volume completely contains the other.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.Distance">
            <summary>
            The distance between two collidible objects, when applicable.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.IntersectPoint">
            <summary>
            The point of intersection between collidible objects, when applicable.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.NearestPoint">
            <summary>
            The nearest point of intersection between collidible objects, when applicable.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.CollisionDetails.IntersectVolume">
            <summary>
            Returns the volume of the intersection.
            </summary>
        </member>
        <member name="T:ProximityToolkit.RelationHandler">
            <summary>
            Handler for RelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.LocationRelationHandler">
            <summary>
            Handler for LocationRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.DirectionRelationHandler">
            <summary>
            Handler for DirectionRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.OrientationRelationHandler">
            <summary>
            Handler for OrientationRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.RotationRelationHandler">
            <summary>
            Handler for RotationRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.MotionRelationHandler">
            <summary>
            Handler for MotionRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.CollisionRelationHandler">
            <summary>
            Handler for CollisionRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.PointingRelationHandler">
            <summary>
            Handler for PointingRelationEventArgs.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.RelationMonitor">
            <summary>
            Enumeration to represent one or more relation monitor types.
            </summary>
        </member>
        <member name="T:ProximityToolkit.RelationEventArgs">
            <summary>
            Collection of relation attributes.
            </summary>
        </member>
        <member name="T:ProximityToolkit.IRelationEventArgs">
            <summary>
            Interface for Relation Event Arguments.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.PresenceA">
            <summary>
            The first Presence in the relation
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.PresenceB">
            <summary>
            The second Presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ActualMonitor">
            <summary>
            The acutal monitor data contained in the args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.RequestedMonitor">
            <summary>
            The originally requested monitor data.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicCollision">
            <summary>
            Gets the Proxemic Collision args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicDirection">
            <summary>
            Gets the Proxemic Direction args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicLocation">
            <summary>
            Gets the Proxemic Location args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicMotion">
            <summary>
            Gets the Proxemic Motion args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicOrientation">
            <summary>
            Gets the Proxemic Orientation args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicPointing">
            <summary>
            Gets the Proxemic Pointing args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IRelationEventArgs.ProxemicRotation">
            <summary>
            Gets the Proxemic Rotation args.
            </summary>
        </member>
        <member name="M:ProximityToolkit.RelationEventArgs.GetPointerNames">
            <summary>
            Gets an array of the pointer names.
            </summary>
            <returns>An array of strings.</returns>
        </member>
        <member name="M:ProximityToolkit.RelationEventArgs.GetRelationArgs(ProximityToolkit.RelationMonitor)">
            <summary>
            Queries this object for relation arguments by relation type.
            </summary>
            <param name="type">The relation type to query for.</param>
            <returns>The matching relation arguments.</returns>
        </member>
        <member name="M:ProximityToolkit.RelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders visualizations for relation attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.RequestedMonitor">
            <summary>
            The original relation attributes requested.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ActualMonitor">
            <summary>
            The valid relation attributes returned.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicDirection">
            <summary>
            The set of attributes related to direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicLocation">
            <summary>
            The set of attributes related to location.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicOrientation">
            <summary>
            The set of attributes related to orientation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicRotation">
            <summary>
            The set of attributes related to rotation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicMotion">
            <summary>
            The set of attributes related to motion.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicPointing">
            <summary>
            Gets the pointing arguments.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationEventArgs.ProxemicCollision">
            <summary>
            The set of attributes related to collision.
            </summary>
        </member>
        <member name="T:ProximityToolkit.DirectionRelationEventArgs">
            <summary>
            A collection of Direction relation attributes.
            </summary>
        </member>
        <member name="F:ProximityToolkit.DirectionRelationEventArgs.ParallelThreshold">
            <summary>
            The threshold angle for two direction vectors to be considered relatively parallel.
            </summary>
        </member>
        <member name="M:ProximityToolkit.DirectionRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of direction attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.ATowardsB">
            <summary>
            True if Presence A is facing toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.BTowardsA">
            <summary>
            True if Presence B is facing toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.AFromB">
            <summary>
            True if Presence A is facing toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.BFromA">
            <summary>
            True if Presence B is facing toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.ATangentalToB">
            <summary>
            True if Presence A is facing tangental to Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.BTangentalToA">
            <summary>
            True if Presence B is facing tangental to Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.AngleAtoB">
            <summary>
            Returns the angle from Presence A to Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.AngleBtoA">
            <summary>
            Returns the angle from Presence B to Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.Angle">
            <summary>
            Return the absolute angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.HorizontalAngle">
            <summary>
            Return the absolute horizontal angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.Parallel">
            <summary>
            True if Presence A and B are facing parallel to one another.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.HorizontallyParallel">
            <summary>
            True if Presence A and B are facing horizontally parallel to one another.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.Purpendicular">
            <summary>
            True if Presence A and B are facing purpendicular to one another.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DirectionRelationEventArgs.HorizontallyPurpendicular">
            <summary>
            True if Presence A and B are facing horizontally purpendicular to one another.
            </summary>
        </member>
        <member name="T:ProximityToolkit.LocationRelationEventArgs">
            <summary>
            A collection of Location relation attributes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.LocationRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of Location attributes.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.Distance">
            <summary>
            The absolute distance between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.DistanceX">
            <summary>
            The distance in the X-direction between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.DistanceY">
            <summary>
            The distance in the Y-direction between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.DistanceZ">
            <summary>
            The distance in the Z-direction between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.VerticalDistance">
            <summary>
            The vertical distance between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.HorizontalDistance">
            <summary>
            The horizontal distance between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.InclineAtoB">
            <summary>
            The angle of incline between PresencA's and PresenceB's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.InclineBtoA">
            <summary>
            The angle of incline between PresencB's and PresenceA's locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.IsAMoving">
            <summary>
            Whether PresenceA is detected to be moving, according to the MotionThreshold.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.IsBMoving">
            <summary>
            True if PresenceB is detected to be moving, according to the MotionThreshold.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.ATowardsB">
            <summary>
            True if Presence A is moving toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.BTowardsA">
            <summary>
            True if Presence B is moving toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.AFromB">
            <summary>
            True if Presence A is moving toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.BFromA">
            <summary>
            True if Presence B is moving toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.ATangentalToB">
            <summary>
            True if Presence A is moving tangental to Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.BTangentalToA">
            <summary>
            True if Presence B is moving tangental to Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.AngleAtoB">
            <summary>
            Returns the angle from Presence A to Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.AngleBtoA">
            <summary>
            Returns the angle from Presence B to Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.Angle">
            <summary>
            Return the absolute angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.Parallel">
            <summary>
            True if Presence A and B are moving parallel to one another.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.Purpendicular">
            <summary>
            True if Presence A and B are moving purpendicular to one another.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.VelocityAtoB">
            <summary>
            Returns the velocity of Presence A toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.VelocityBtoA">
            <summary>
            Returns the velocity of Presence B toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.TotalTowardVelocity">
            <summary>
            Returns the total velocity of the two presences toward each other.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.AccelerationAtoB">
            <summary>
            Returns the acceleration of Presence A toward Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.AccelerationBtoA">
            <summary>
            Returns the acceleration of Presence B toward Presence A.
            </summary>
        </member>
        <member name="P:ProximityToolkit.LocationRelationEventArgs.TotalTowardAcceleration">
            <summary>
            Return the total acceleration of the presences toward each other.
            </summary>
        </member>
        <member name="T:ProximityToolkit.OrientationRelationEventArgs">
            <summary>
            A collection of Orientation relation attributes.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.InclineDifference">
            <summary>
            Gets the difference in Incline angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.InclineAgrees">
            <summary>
            Gets whether the Incline angles of Presence A and B are similar.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.AzimuthDifference">
            <summary>
            Gets the difference in Azimuth angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.AzimuthAgrees">
            <summary>
            Gets whether the Azimuth angles of Presence A and B are similar.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.RollDifference">
            <summary>
            Gets the difference in Roll angle between Presence A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.OrientationRelationEventArgs.RollAgrees">
            <summary>
            Gets whether the Roll angles of Presence A and B are similar.
            </summary>
        </member>
        <member name="T:ProximityToolkit.RotationRelationEventArgs">
            <summary>
            A collection of Rotation relation attributes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.RotationRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of the rotation attributes.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.RotationRelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RotationRelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="T:ProximityToolkit.MotionRelationEventArgs">
            <summary>
            A collection of Motion relation attributes.
            </summary>
        </member>
        <member name="F:ProximityToolkit.MotionRelationEventArgs.MotionThreshold">
            <summary>
            The threshold of change magnitude for an object to be considered moving.
            </summary>
        </member>
        <member name="M:ProximityToolkit.MotionRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of the motion attributes.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.PresenceA">
            <summary>
            The first presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.PresenceB">
            <summary>
            The second presence in the relation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.IsAMoving">
            <summary>
            True if PresenceA is detected to be moving, according to the MotionThreshold.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.IsBMoving">
            <summary>
            True if PresenceB is detected to be moving, according to the MotionThreshold.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.XVelocityAgrees">
            <summary>
            True if the X velocity is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.YVelocAgrees">
            <summary>
            True if the Y velocity is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.ZVelocAgrees">
            <summary>
            True if the Z velocity is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.VelocityDifference">
            <summary>
            Gets the absolute difference between the over all velocity of the two presences.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.XAccelerationAgrees">
            <summary>
            True if the X acceleration is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.YAccelerationAgrees">
            <summary>
            True if the Y acceleration is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.ZAccelerationAgrees">
            <summary>
            True if the Z acceleration is in the same relative direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.MotionRelationEventArgs.AccelerationDifference">
            <summary>
            Gets the absolute difference between the over all acceleration of the two presences.
            </summary>
        </member>
        <member name="T:ProximityToolkit.PointerArgs">
            <summary>
            Pointing relation attributes for a particular pointer.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.PresenceA">
            <summary>
            The directable presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.PresenceB">
            <summary>
            The collidible presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.PointsAt">
            <summary>
            Gets whether Presence A points at Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.PointsToward">
            <summary>
            Gets whether Presence A is pointing in the general direction of Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.Distance">
            <summary>
            Gets the pointing distance, if applicable, between PresenceA and PresenceB.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.IsTouching">
            <summary>
            Gets whether the distance is close enough to be considered a touch.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.Intersection">
            <summary>
            Gets the coordinates on PresenceB where PresenceA is pointing.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.IntersectAngle">
            <summary>
            Assuming Presence B is a DisplayPlane, gets the angle of intersection of PresenceA pointing at Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.IntersectVector">
            <summary>
            Assuming Presence B is a DisplayPlane, gets the vector of intersection of PresenceA pointing at Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.DisplayPoint">
            <summary>
            Assuming Presence B is a DisplayPlane, gets the screen coordinate that PresenceA is pointing at on Presence B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointerArgs.LocalCoordinates">
            <summary>
            Assuming Presence B is a DisplayPlane, gets the plane coordinate that PresenceA is pointing at on Presence B.
            </summary>
        </member>
        <member name="T:ProximityToolkit.PointingRelationEventArgs">
            <summary>
            A collection of Pointing relation attributes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.PointingRelationEventArgs.ContainsKey(System.String)">
            <summary>
            Checks whether a pointer name exists.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Whether the key exists.</returns>
        </member>
        <member name="M:ProximityToolkit.PointingRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of the relation to the given renderring interface.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.PresenceA">
            <summary>
            The first presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.PresenceB">
            <summary>
            The second presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.Item(System.Int32)">
            <summary>
            Gets the pointer args by an index.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The args.</returns>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.Item(System.String)">
            <summary>
            Gets the pointer args by the name of the pointer.
            </summary>
            <param name="key">Name of the pointer.</param>
            <returns>The args.</returns>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.DefaultPointer">
            <summary>
            Gets the args for the default pointer.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.Count">
            <summary>
            Gets the number of pointer entries.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PointingRelationEventArgs.Keys">
            <summary>
            Gets the list of pointer names.
            </summary>
        </member>
        <member name="T:ProximityToolkit.CollisionRelationEventArgs">
            <summary>
            A collection of Collision relation attributes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.CollisionRelationEventArgs.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of the Collision attribtues.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.CollisionRelationEventArgs.Collides">
            <summary>
            Gets whether the two presences collide.
            </summary>
        </member>
        <member name="P:ProximityToolkit.CollisionRelationEventArgs.Contains">
            <summary>
            Gets whether or not one presence completely contains the other.
            </summary>
        </member>
        <member name="P:ProximityToolkit.CollisionRelationEventArgs.Distance">
            <summary>
            Gets the distance between the two presences, even if no collision is detected.
            </summary>
        </member>
        <member name="P:ProximityToolkit.CollisionRelationEventArgs.Intersection">
            <summary>
            Gets the coordinates of an intersection between the two presences.
            </summary>
        </member>
        <member name="P:ProximityToolkit.CollisionRelationEventArgs.Nearest">
            <summary>
            Gets the point nearest to intersection if no collision occurred.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Debug.DebugCollector">
            <summary>
            Used to find overlaps in sets.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCollector.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a key to a list.
            </summary>
            <param name="name">Unique name for the list.</param>
            <param name="verbose">Output information to the console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCollector.Remove(System.String,System.String,System.Boolean)">
            <summary>
            Removes a key from a list.
            </summary>
            <param name="name">Unique name for the list.</param>
            <param name="verbose">Output information to the console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCollector.Check(System.String)">
            <summary>
            Outputs the list of keys.
            </summary>
            <param name="name">The list name.</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCollector.Clear(System.String,System.Boolean)">
            <summary>
            Clears a list.
            </summary>
            <param name="name">Name of the list.</param>
            <param name="verbose">Output information to console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCollector.ClearAll(System.Boolean)">
            <summary>
            Clears all lists.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Visualization.RenderHandler">
            <summary>
            Handler for renderring.
            </summary>
            <param name="r"></param>
        </member>
        <member name="T:ProximityToolkit.Visualization.IRenderMediator">
            <summary>
            Contracts a common set of 3D renderring functions and primitives.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.DecoratorHandler">
            <summary>
            Handler for Decorators.
            </summary>
            <param name="pdeco">The decorator</param>
        </member>
        <member name="F:ProximityToolkit.Presence.DecoratorUpdateArgs.Source">
            <summary>
            The source input module for the update.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.DecoratorUpdateArgs.Confidence">
            <summary>
            The confidence factor of the update data.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.DecoratorUpdateArgs.IsAbsolute">
            <summary>
            Whether coordinates for this update are absolute or relative.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.DecoratorUpdateArgs.IsVisible">
            <summary>
            Whether the presence is detected.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.DecoratorBase">
            <summary>
            Base class for presence decorators.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.PresenceBase">
            <summary>
            Base class for representing presences in the space.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IPresenceNode">
            <summary>
            Interface to represent an object in the proximity data hierarchy.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IRelatable">
            <summary>
            Interface used to represent an object that can be related to other objects.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IVisible">
            <summary>
            Interface for presence objects that can disappear.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SignalModelUpdate">
            <summary>
            Manually signals the ModelUpdated event.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SetName(System.String)">
            <summary>
            Sets the name of the Presence.
            </summary>
            <param name="newname"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetNodeLock">
            <summary>
            Gets the node iteration lock for this Presence.
            </summary>
            <returns>The locking object.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetNodeRoot">
            <summary>
            Gets the root node of this branch.
            </summary>
            <returns>The root node.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetNodeRoot(System.Type)">
            <summary>
            Gets the nearest node of a particular type higher in the hierarchy.
            </summary>
            <param name="t">The desired node type to find.</param>
            <returns>The found node.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SetAbsolute(System.Boolean)">
            <summary>
            Sets whether this Presence is absolute or relative.
            </summary>
            <param name="value">Whether the Presence is to be absolute or relative.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to apply the necessary transformation to existing internal data when changing between absolute/relative mode.
            </summary>
            <param name="trans">The transformation to apply.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.BeginUpdate">
            <summary>
            Puts the Presence into update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnBeginUpdate">
            <summary>
            Callback to handle custom Presence actions when enterring update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.EndUpdate">
            <summary>
            Takes the Presence out of update mode.
            </summary>
            <returns>The final confidence value.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnEndUpdate">
            <summary>
            Callback to handle custom Presence actions when exiting update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnFinishedUpdate">
            <summary>
            Callback to handle custom Presence actions when updating completes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SetModified">
            <summary>
            Sets the modified flag.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.DispatchUpdate(System.String,System.Object,System.Boolean)">
            <summary>
            Handles routing updates on client Presence objects to this node, or the appropriate child node.
            </summary>
            <param name="key">The key that is being updated.</param>
            <param name="value">The updated value.</param>
            <param name="removed">Whether the notification is due to a removal.</param>
            <returns>True if the update is handled.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnDispatchUnhandled(System.String,System.Object,System.Boolean)">
            <summary>
            Callback for dealing with unhandled updates.
            </summary>
            <param name="key">The key that is being updated.</param>
            <param name="value">The updated value.</param>
            <param name="removed">Whether the notification is due to a removal.</param>
            <returns>True if the update is handled.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnDispatchUpdate(System.String,System.Object,System.Boolean)">
            <summary>
            Callback for dealing with updates to this Presence.
            </summary>
            <param name="key">Dictionary key of updated value.</param>
            <param name="value">Updated value.</param>
            <returns>True if handled, false if not</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.WaitForEmbodiment(System.Int32)">
            <summary>
            Blocks until a presence is embodied.
            </summary>
            <param name="timeout">Maximum duration to block before the method exits.</param>
            <returns>True if the Presence was embodied while waiting.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetNodeChild(System.String,System.String)">
            <summary>
            Gets a child node of a particular type, optionally with the given name.
            </summary>
            <param name="type">The type to match.</param>
            <param name="name">The name to match.  Specify string.Empty if it doesn't matter.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Handles renderring procedure for this node.
            </summary>
            <param name="r">Interface used to do renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback to handle custom renderring procedures for Presences.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.InitProperties">
            <summary>
            Initializes any node properties that cannot be detected automatically.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.AddNode(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Adds a child to this node.
            </summary>
            <param name="ipn">The child node to add.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.RemoveNode(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Removes a child from this node.
            </summary>
            <param name="ipn">The child node to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetNode(System.String)">
            <summary>
            Returns the property with the given name.  Dot-separated paths will retrieve sub-properties.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetProperty(System.String,System.Type,System.Object@)">
            <summary>
            Gets a property value within the node hierarchy, of a particular data type.
            </summary>
            <param name="key">The dot-delimited string defining the node path of the value.</param>
            <param name="outtype">The desired type.</param>
            <param name="outvalue">The value, if found.</param>
            <returns>bool - whether the value was found or not.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetValue``1(System.String)">
            <summary>
            Retrieves a value at a given key, if that value can be cast as type T.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="key">The key path.</param>
            <returns>The value of type T.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.AddToSD(ProximityToolkit.Networking.DictionaryManager)">
            <summary>
            Adds this node to a Shared Dictionary.
            </summary>
            <param name="dictman">The target Dictionary Manager.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnBeginSynchToSD">
            <summary>
            Callback for custom actions when beginning a synch to the Shared Dictionary.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnEndSynchToSD">
            <summary>
            Callback for custom actions when ending a synch to the Shared Dictionary.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SynchToSD">
            <summary>
            Synchronizes all modified data from this node and children to the Shared Dictionary.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.RemoveFromSD">
            <summary>
            Removes this node and children from the Shared Dictionary.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.SetSmoothFilter(System.Double[])">
            <summary>
            Sets the smoothing filter for all contained and child history properties.
            </summary>
            <param name="filter">The filter to set.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle setting the smoothing filter for history properties within this node.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetIdFromName(System.String)">
            <summary>
            Fixes a friendly name to act as a valid ID string.
            </summary>
            <param name="name">The friendly name.</param>
            <returns>The resulting ID string.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.AutoDetectNodes(ProximityToolkit.Presence.IPresenceNode,System.Object)">
            <summary>
            Automatically detects properties from particular interfaces and adds them as PresenceProperty child nodes.
            </summary>
            <param name="ipn">The parent presence node.</param>
            <param name="srcobj">The node to process.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetCoordinate(ProximityToolkit.Vector3,ProximityToolkit.Presence.IPresenceNode,ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Translates a coordinate from one Presence coordinate system to another.
            </summary>
            <param name="coord">The coordinate to convert.</param>
            <param name="src">The source space.</param>
            <param name="dst">The destination space.</param>
            <returns>The converted coordinatel</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.HasRelationInterface(System.String)">
            <summary>
            Gets whether this object implements a particular relation interface.
            </summary>
            <param name="t">The interface type.</param>
            <returns>True if the interface is implemented.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetRelationInterface(System.String)">
            <summary>
            Gets this node, or the first child node that implements a particular relation interface.
            </summary>
            <param name="t">The relation interface to find.</param>
            <returns>This node, or the first child that implements the relation interface.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceBase.GetRelationInterfaces(System.String)">
            <summary>
            Gets all child nodes that implement a particular relation interface.
            </summary>
            <param name="type">The name of the interface type to search for.</param>
            <returns>An array of all matches.</returns>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.EmbodimentChanged">
            <summary>
            Occurs when a presence's embodiment status changes.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.DataUpdating">
            <summary>
            Occurs when a presence begins an update.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.DataUpdated">
            <summary>
            Occurs when a presence finishes an update.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.ModelUpdated">
            <summary>
            Occurs when the fundamental properties of a presence are updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.PreRender">
            <summary>
            Occurs before a presence is renderred, while in world coordinates.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.Renderring">
            <summary>
            Occurs before a presence is renderred, while in local coordinates.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.Renderred">
            <summary>
            Occurs after a presence has been renderred, while in local coordinates.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.PostRender">
            <summary>
            Occurs after a presence has been renderred, while back in world coordinates.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.NodeAdded">
            <summary>
            Occurs when a child node is added.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceBase.NodeRemoved">
            <summary>
            Occurs when a child node is removed.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Parent">
            <summary>
            The parent PresenceNode for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.TransformParent">
            <summary>
            The parent transformation node for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Name">
            <summary>
            The name for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.FullName">
            <summary>
            The full branch name for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsVisible">
            <summary>
            Gets or sets whether the presence is detected within the space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Confidence">
            <summary>
            Gets or sets the data confidence value between 0 (uncertain) and 1 (certain).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.LastUpdate">
            <summary>
            The timestamp of the last update.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsModified">
            <summary>
            Gets whether any PresenceProperty has been modified.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsBranchModified">
            <summary>
            Gets whether this node, or any sub-node has been modified.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsUpdating">
            <summary>
            Gets whether this presence is in update mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsProxy">
            <summary>
            Gets whether this presence is a client-side proxy of an original presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsEmbodied">
            <summary>
            Gets whether this presence is connected to an existing entity in the space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.RenderEnabled">
            <summary>
            Gets or sets whether renderring of this presence is enabled.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.HasNodes">
            <summary>
            Gets whether this node has children.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.DictionaryKey">
            <summary>
            Gets the designated key for this node in the shared dictionary.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Value">
            <summary>
            Gets the value of this node, if applicable.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Item(System.String)">
            <summary>
            Accesses a property of this node, or a child node, using a dot-delmited string.
            </summary>
            <param name="key">The delimited string key.</param>
            <returns>The data at the key address, if valid.</returns>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Selected">
            <summary>
            Gets or sets whether this Presence is in a selected state.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.BranchSelected">
            <summary>
            Gets whether this node, or a child thereof, is in a selected state.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.IsAbsolute">
            <summary>
            Gets whether the coordinates in this Presence are absolute or relative.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Monitor">
            <summary>
            Gets the relation monitor flags.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.DictionaryManager">
            <summary>
            Gets the dictionary manager for this presence tree.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.LocalTransform">
            <summary>
            The relative transformation effect that this node has on child nodes.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.GlobalTransform">
            <summary>
            The over all transformation effect that parent nodes have on this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceBase.Nodes">
            <summary>
            Returns the list of property nodes.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DecoratorBase.Update(ProximityToolkit.Presence.DecoratorUpdateArgs)">
            <summary>
            Updates this decorator with fresh data.
            </summary>
            <param name="args">The collection of update parameters.</param>
            <returns>True if update was handled.</returns>
        </member>
        <member name="P:ProximityToolkit.Presence.DecoratorBase.DictionaryKey">
            <summary>
            The root used to store attributes of this decorator.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DecoratorBase.Source">
            <summary>
            The source input module that generated the current set of decorator data.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.PresenceProperty">
            <summary>
            A data hierarchy node that represents a property of its parent.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.BeginUpdate">
            <summary>
            Puts the property into update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.EndUpdate">
            <summary>
            Takes the property out of update mode.
            </summary>
            <returns>The final confidence value.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.SetModified">
            <summary>
            Sets the modified flag for this node, and the parent.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.AddNode(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Adds a child to this node.
            </summary>
            <param name="ipn">The child node to add.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetNode(System.String)">
            <summary>
            Returns the property with the given name.  Dot-separated paths will retrieve sub-properties.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetNodeLock">
            <summary>
            Gets the node iteration lock for this Presence.
            </summary>
            <returns>The locking object.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.DispatchUpdate(System.String,System.Object,System.Boolean)">
            <summary>
            Handles routing updates on client Presence objects to this node, or the appropriate child node.
            </summary>
            <param name="key">The key that is being updated.</param>
            <param name="value">The updated value.</param>
            <param name="removed">Whether the notification is due to a removal.</param>
            <returns>True if the update is handled.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.SetSmoothFilter(System.Double[])">
            <summary>
            Sets the smoothing filter for all contained and child history properties.
            </summary>
            <param name="filter">The filter to set.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Handles renderring procedure for this node.
            </summary>
            <param name="r">Interface used to do renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetNodeRoot">
            <summary>
            Gets the root node of this branch.
            </summary>
            <returns>The root node.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetNodeRoot(System.Type)">
            <summary>
            Gets the nearest node of a particular type higher in the hierarchy.
            </summary>
            <param name="t">The desired node type to find.</param>
            <returns>The found node.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.SetTransmitted">
            <summary>
            Sets the transmitted flag for this property.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetNodeChild(System.String,System.String)">
            <summary>
            Dummy method for getting child nodes.  However, PresenceProperties have no children, therefore this always returns null.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="name">The name to search for.</param>
            <returns>Always null.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetValue``1(System.String)">
            <summary>
            Dummy method for getting child values.
            </summary>
            <typeparam name="T">The desired datatype.</typeparam>
            <param name="key">The key.</param>
            <returns>Always null.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetPresenceRoot(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Finds the root of a Presence Node branch.
            </summary>
            <param name="ipn">A node in the branch to trace.</param>
            <returns>The root of the branch.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.GetInputPath(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Gets the path of a branch.
            </summary>
            <param name="ipn">The node to trace.</param>
            <returns>The dot-delimited path string.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.AddToSD(ProximityToolkit.Networking.DictionaryManager)">
            <summary>
            Adds this node to a Shared Dictionary.
            </summary>
            <param name="dictman">The target Dictionary Manager.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.SynchToSD">
            <summary>
            Synchronizes all modified data from this node and children to the Shared Dictionary.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceProperty.RemoveFromSD">
            <summary>
            Removes this node and children from the Shared Dictionary.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceProperty.NodeAdded">
            <summary>
            Occurs when a child node is added.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.PresenceProperty.NodeRemoved">
            <summary>
            Occurs when a child node is removed.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.Name">
            <summary>
            The name for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.FullName">
            <summary>
            The full branch name for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.Nodes">
            <summary>
            Returns the list of property nodes.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.Parent">
            <summary>
            The parent PresenceNode for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.TransformParent">
            <summary>
            The parent transformation node for this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsUpdating">
            <summary>
            Gets whether this object is in update mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsModified">
            <summary>
            Gets whether the value of the associated property has changed since the last update.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsBranchModified">
            <summary>
            Gets whether this node, or any sub-node has been modified.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsFresh">
            <summary>
            Gets whether the value was set during the last update cycle.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsTransmitted">
            <summary>
            Gets whether the server-side value has been transmitted to clients.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.IsProxy">
            <summary>
            Gets whether this property is a client-side proxy of an original property.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.HasNodes">
            <summary>
            Gets whether this node has children.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.DictionaryKey">
            <summary>
            Gets the designated key for this node in the shared dictionary.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.LocalTransform">
            <summary>
            The relative transformation effect that this node has on child nodes.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.GlobalTransform">
            <summary>
            The over all transformation effect that parent nodes have on this node.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.Selected">
            <summary>
            Gets or sets whether this Presence is in a selected state.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.BranchSelected">
            <summary>
            Gets whether this node, or a child thereof, is in a selected state.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.PropertyInfo">
            <summary>
            The descriptor for the associated property.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.PropertyObject">
            <summary>
            The object from which the associated property is derived.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.Value">
            <summary>
            Gets or sets the value of the associated property.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.HasValue">
            <summary>
            Gets whether the associated property is valid.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.ReadOnly">
            <summary>
            Gets whether the associated property is read only.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceProperty.LastValue">
            <summary>
            Gets the value from the last update cycle.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IOrientable">
            <summary>
            Interface used to represent an object that can change direction.
            </summary>
        </member>
        <member name="T:ProximityToolkit.AngleHistoryProperty">
            <summary>
            Maintains a history queue of Angles.
            </summary>
        </member>
        <member name="T:ProximityToolkit.ISmoothable">
            <summary>
            Marks a history object that supports history smoothing.
            </summary>
        </member>
        <member name="M:ProximityToolkit.AngleHistoryProperty.CalculateSmoothValue">
            <summary>
            Calculates the smoothed value.
            </summary>
        </member>
        <member name="M:ProximityToolkit.AngleHistoryProperty.SetSmoothFilter(System.Double[])">
            <summary>
            Sets the filter used for smoothing.
            </summary>
            <param name="filtervector">An array of weights used to calculate history smoothing.</param>
        </member>
        <member name="M:ProximityToolkit.AngleHistoryProperty.Derivative">
            <summary>
            Gets the difference between the two most recent values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProximityToolkit.AngleHistoryProperty.Value">
            <summary>
            Gets or sets the current property value.
            </summary>
        </member>
        <member name="P:ProximityToolkit.AngleHistoryProperty.Smooth">
            <summary>
            Gets and sets whether the current value is smoothed or raw.
            </summary>
        </member>
        <member name="P:ProximityToolkit.AngleHistoryProperty.Depth">
            <summary>
            Gets and sets the desired history depth.  If the current history list is longer than the new depth, the oldest values are thrown out.
            </summary>
        </member>
        <member name="P:ProximityToolkit.AngleHistoryProperty.Count">
            <summary>
            Gets the number of history entries stored in this structure.
            </summary>
        </member>
        <member name="P:ProximityToolkit.AngleHistoryProperty.Item(System.Int32)">
            <summary>
            Gets the property value at a given history index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:ProximityToolkit.Presence.PointerDecorator">
            <summary>
            Decorator to represent a collection of pointers associated with a presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IPointerCollection">
            <summary>
            Interface used to represent a collection of pointers.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.PointerDecorator.pointers">
            <summary>
            Occurs when a pointer is removed.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PointerDecorator.#ctor(ProximityToolkit.Presence.IPresenceNode)">
            <summary>
            Constructs a PointerDecorator.
            </summary>
            <param name="parent">The parent presence node.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PointerDecorator.GetPointer(System.String)">
            <summary>
            Gets a new or existing instance of the requested pointer.
            </summary>
            <param name="name">The name of the pointer.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PointerDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,System.String,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Updates a specific pointer.
            </summary>
            <param name="args">General update arguments.</param>
            <param name="pointername">Name of the pointer.</param>
            <param name="newloc">New location data for the pointer.</param>
            <param name="newdir">New direction data for the pointer.</param>
            <returns>Whether the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PointerDecorator.Update(System.Collections.Generic.IEnumerable{ProximityToolkit.Presence.IPointer},ProximityToolkit.Matrix)">
            <summary>
            Updates all pointers with a new transformation.
            </summary>
            <param name="pointers">Pointers to update.</param>
            <param name="transform">Transformation to apply.</param>
        </member>
        <member name="E:ProximityToolkit.Presence.PointerDecorator.PointerAdded">
            <summary>
            Occurs when a pointer is added.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PointerDecorator.Pointers">
            <summary>
            Gets the collection of pointers.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IDirectable">
            <summary>
            Interface used to represent an object that can face in a particular direction.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Vector3HistoryProperty">
            <summary>
            Maintains a history queue of Vectors.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Vector3HistoryProperty.SetSmoothFilter(System.Double[])">
            <summary>
            An array of weights used to calculate history smoothing.
            </summary>
            <param name="filtervector"></param>
        </member>
        <member name="P:ProximityToolkit.Vector3HistoryProperty.Value">
            <summary>
            Gets or sets the current property value.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3HistoryProperty.Smooth">
            <summary>
            Gets and sets whether the current value is smoothed or raw.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3HistoryProperty.Depth">
            <summary>
            Gets and sets the desired history depth.  If the current history list is longer than the new depth, the oldest values are thrown out.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3HistoryProperty.Count">
            <summary>
            Gets the number of history entries stored in this structure.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3HistoryProperty.Item(System.Int32)">
            <summary>
            Gets the property value at a given history index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:ProximityToolkit.Networking.ClientProximitySpaceHandler">
            <summary>
            Handler for ProxmitySpace.
            </summary>
            <param name="space">The space.</param>
        </member>
        <member name="T:ProximityToolkit.Networking.ProximityClientConnection">
            <summary>
            Handles a client connection to the SharedDictionary.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Networking.DictionaryManager">
            <summary>
            Base class for SharedDictionary connections.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.Start(System.Boolean)">
            <summary>
            Attempts to establish this connection.
            </summary>
            <param name="wait">Whether the program should block until the connection is established.</param>
            <returns>True if connection established successfully.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.Start(System.String,System.Int32,System.Boolean)">
            <summary>
            Attempts to establish this connection.
            </summary>
            <param name="ip">The target IP address.</param>
            <param name="port">The target Port.</param>
            <param name="wait">Whether the program should block until the connection is established.</param>
            <returns>True if connection established successfully.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.Stop(System.Boolean)">
            <summary>
            Closes this connection.
            </summary>
            <param name="wait">Whether the program should block until the connection is closed.</param>
            <returns>True if successfully closed.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.AddKey(System.String,System.Object)">
            <summary>
            Add a value into the dictionary at the given key.
            </summary>
            <param name="path">The path to insert the value.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.UpdateKey(System.String,System.Object)">
            <summary>
            Updates a value presumed to already exist in the dictionary at the given key.
            </summary>
            <param name="path">The path to update.</param>
            <param name="value">The value to update.</param>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.RemoveKey(System.String)">
            <summary>
            Removes the value from the dictionary at the given key.
            </summary>
            <param name="pattern">The key or pattern to be removed.</param>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.ContainsKey(System.String)">
            <summary>
            Gets whether the given key or pattern exists in the dictionary.
            </summary>
            <param name="pattern">The key or pattern to check.</param>
            <returns>True if it exists.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.GetSubscription(System.String,GroupLab.Networking.SubscriptionEventHandler)">
            <summary>
            Creates a new subscription on this dictionary.
            </summary>
            <param name="pattern">The dictionary pattern to subscribe to.</param>
            <param name="handler">The event handler for the subscription.</param>
            <returns>The new subscription.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.GetEntries(System.String)">
            <summary>
            Gets a collection of dictionary entries matching a particular pattern.
            </summary>
            <param name="pattern">The pattern of keys to return.</param>
            <returns>The collection of entries.</returns>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.SetInspector(GroupLab.Networking.DictionaryInspector)">
            <summary>
            Set an inspector for this dictionary.
            </summary>
            <param name="inspector">The dictionary inspector control.</param>
        </member>
        <member name="M:ProximityToolkit.Networking.DictionaryManager.ResetUpdateCount">
            <summary>
            Resets the update key count to zero.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.Connecting">
            <summary>
            Occurs when attempting to establish a connection.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.Connected">
            <summary>
            Occurs when a connection has been established.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.Reconnected">
            <summary>
            Occurs when a connection has been re-established after an interruption.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.Disconnecting">
            <summary>
            Occurs when a connection is about to be closed.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.Disconnected">
            <summary>
            Occurs when a connection has been closed.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.ConnectionLost">
            <summary>
            Occurs when a connection has been interrupted.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.ConnectionDropped">
            <summary>
            Occurs when a connection has been closed because of an interruption.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.ConnectionRefused">
            <summary>
            Occurs when a connection attempt has failed.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.DictionaryManager.ClientsChanged">
            <summary>
            Occurs when a client connects/disconnects.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.ConnectToIP">
            <summary>
            Gets the target IP address for this connection.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.ConnectToPort">
            <summary>
            Gets the target Port for this connection.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.IsConnected">
            <summary>
            Gets whether the connection is currently established.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.IsConnecting">
            <summary>
            Gets whether the connection is currently being established.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.IsDisconnecting">
            <summary>
            Gets whether the connection is currently being closed.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.IsRetrying">
            <summary>
            Gets whether the connection is currently attempting to re-establish itself after an interruption.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.HasThroughput">
            <summary>
            Gets whether this connection has seen any activity.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.Item(System.String)">
            <summary>
            Gets or sets the value of a given dictionary key.
            </summary>
            <param name="path">The name of the key.</param>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.ConnectionID">
            <summary>
            Gets the dictionary instance ID.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.ConnectedCount">
            <summary>
            Gets the count of connected clients.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.PendingTransmission">
            <summary>
            Gets the number of pending outbound messages.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.TotalKeys">
            <summary>
            Gets the total number of keys in the dictionary.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.UpdatedKeyCount">
            <summary>
            Gets the total number of updated keys in the dictionary.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.DictionaryManager.OverflowMode">
            <summary>
            Gets or sets whether the dictionary is in overflow handling mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Networking.ProximityClientConnection.GetSpace">
            <summary>
            Get the first available ProxmitySpace.
            </summary>
            <returns>The first available ProxmitySpace.</returns>
        </member>
        <member name="E:ProximityToolkit.Networking.ProximityClientConnection.SpaceAdded">
            <summary>
            Signalled when a ProximitySpace is added.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Networking.ProximityClientConnection.SpaceRemoved">
            <summary>
            Signalled when a ProximitySpace is removed.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Networking.ProximityClientConnection.Spaces">
            <summary>
            Returns the collection of ProximitySpaces.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.SelectedPresenceNode">
            <summary>
            Wrapper class to store the Presence Node that is currently selected by the user.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.SelectedPresenceNode.Value">
            <summary>
            The Presence Node that is currently selected by the user.
            </summary>
        </member>
        <member name="T:ProximityToolkit.AngleTypeConverter">
            <summary>
            Handles converting an Angle to a string, and back again.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Angle">
            <summary>
            Class to represent an angle and easily convert between units.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Angle.Set(System.Double,ProximityToolkit.AngleUnit)">
            <summary>
            Sets the angle value.
            </summary>
            <param name="angle">The angle value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:ProximityToolkit.Angle.SetOppAdj(System.Double,System.Double)">
            <summary>
            Sets the angle value from opposite and adjacent lengths.
            </summary>
            <param name="opp">The opposite length.</param>
            <param name="adj">The adjacent length.</param>
        </member>
        <member name="M:ProximityToolkit.Angle.SetOppHyp(System.Double,System.Double)">
            <summary>
            Sets the angle value from opposite and hypoteneuse lengths.
            </summary>
            <param name="opp">The opposite length.</param>
            <param name="hyp">The hypoteneuse length.</param>
        </member>
        <member name="M:ProximityToolkit.Angle.SetAdjHyp(System.Double,System.Double)">
            <summary>
            Sets the angle value from adjacent and hypoteneuse lengths.
            </summary>
            <param name="adj">The adjacent length.</param>
            <param name="hyp">The hypoteneuse length.</param>
        </member>
        <member name="M:ProximityToolkit.Angle.GetValue(ProximityToolkit.AngleUnit)">
            <summary>
            Gets the value in the specified units.
            </summary>
            <param name="unit">The desired units.</param>
            <returns>The value in desired units.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.Abs">
            <summary>
            Gets the absolute value of the angle.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.ToString">
            <summary>
            Gets the angle value as a string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.ToString(ProximityToolkit.AngleUnit)">
            <summary>
            Gets the angle as a string, in the given units.
            </summary>
            <param name="unit">The desired units.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Addition(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle addition.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Multiply(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle multiplication.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Subtraction(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle subtraction.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Division(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle division.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Addition(ProximityToolkit.Angle,System.Double)">
            <summary>
            Angle to scalar addition.
            </summary>
            <param name="a1">An angle.</param>
            <param name="val">A scalar.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Multiply(ProximityToolkit.Angle,System.Double)">
            <summary>
            Angle to scalar multiplication.
            </summary>
            <param name="a1">An angle.</param>
            <param name="val">A scalar.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Subtraction(ProximityToolkit.Angle,System.Double)">
            <summary>
            Angle to scalar subtraction.
            </summary>
            <param name="a1">An angle.</param>
            <param name="val">A scalar.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Division(ProximityToolkit.Angle,System.Double)">
            <summary>
            Angle to scalar division.
            </summary>
            <param name="a1">An angle.</param>
            <param name="val">A scalar.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Addition(System.Double,ProximityToolkit.Angle)">
            <summary>
            Scalar to angle addition.
            </summary>
            <param name="val">A scalar.</param>
            <param name="a1">An angle.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Multiply(System.Double,ProximityToolkit.Angle)">
            <summary>
            Scalar to angle multiplication.
            </summary>
            <param name="val">A scalar.</param>
            <param name="a1">An angle.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Subtraction(System.Double,ProximityToolkit.Angle)">
            <summary>
            Scalar to angle subtraction.
            </summary>
            <param name="val">A scalar.</param>
            <param name="a1">An angle.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Division(System.Double,ProximityToolkit.Angle)">
            <summary>
            Scalar to angle division.
            </summary>
            <param name="val">A scalar.</param>
            <param name="a1">An angle.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_LessThan(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_GreaterThan(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_LessThanOrEqual(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_GreaterThanOrEqual(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Equality(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.op_Inequality(ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Angle to angle comparison.
            </summary>
            <param name="a1">One angle.</param>
            <param name="a2">Another angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.Equals(System.Object)">
            <summary>
            Equality tester.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Whether equal.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>An int.</returns>
        </member>
        <member name="M:ProximityToolkit.Angle.CompareTo(System.Object)">
            <summary>
            Comparison method.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="P:ProximityToolkit.Angle.Undefined">
            <summary>
            Property that represents and undefined angle.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Angle0Degrees">
            <summary>
            Shortcut to obtain an angle of 0 degrees.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Angle90Degrees">
            <summary>
            Shortcut to obtain an angle of 90 degrees.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Angle180Degrees">
            <summary>
            Shortcut to obtain an angle of 180 degrees.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Angle270Degrees">
            <summary>
            Shortcut to obtain an angle of 270 degrees.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Angle360Degrees">
            <summary>
            Shortcut to obtain an angle of 360 degrees.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Radians">
            <summary>
            This angle in radians.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Angle.Degrees">
            <summary>
            This angle in degrees.
            </summary>
        </member>
        <member name="T:ProximityToolkit.RelationPair">
            <summary>
            Represents a relation between two presences.
            </summary>
        </member>
        <member name="M:ProximityToolkit.RelationPair.NotifyProximityData">
            <summary>
            Calculates the appropriate relation arguments and raises notifications.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnUpdatedAsynch">
            <summary>
            Occurs after all other relation events have been fired, and receives all proximity data calculated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnLocationUpdatedAsynch">
            <summary>
            Occurs when the Location relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnDirectionUpdatedAsynch">
            <summary>
            Occurs when the Direction relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnOrientationUpdatedAsynch">
            <summary>
            Occurs when the Orientation relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnRotationUpdatedAsynch">
            <summary>
            Occurs when the Rotation relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnMotionUpdatedAsynch">
            <summary>
            Occurs when the Motion relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnCollisionUpdatedAsynch">
            <summary>
            Occurs when the Collision relation is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.RelationPair.OnPointingUpdatedAsynch">
            <summary>
            Occurs when the Pointing relation is updated.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationPair.A">
            <summary>
            Gets the first presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationPair.B">
            <summary>
            Get the second presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationPair.Monitor">
            <summary>
            Gets the relation monitor flags.
            </summary>
        </member>
        <member name="P:ProximityToolkit.RelationPair.LastArgs">
            <summary>
            Gets the arguments from the last update.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Networking.DictionaryConnectedHandler">
            <summary>
            Handler for dictionary connection.
            </summary>
            <param name="sender">The source object.</param>
            <param name="ip">The connection IP.</param>
            <param name="port">The connection port.</param>
        </member>
        <member name="T:ProximityToolkit.Collision.LineSegment">
            <summary>
            Collision class representing a double-bounded line.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Line">
            <summary>
            Collision class representing an unbounded line.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Line.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the line data.
            </summary>
            <param name="origin">A point on the line.</param>
            <param name="direction">A vector along the line.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Line.NearestPoint(ProximityToolkit.Vector3)">
            <summary>
            Gets the nearest point on the line to the specified vector.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Line.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Line.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Line.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Line.Location">
            <summary>
            A point on the line.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Line.Direction">
            <summary>
            A vector along the line.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.LineSegment.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the line segment data.
            </summary>
            <param name="pointa">One end of the line.</param>
            <param name="pointb">The other end of the line.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.LineSegment.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.LineSegment.NearestPoint(ProximityToolkit.Vector3)">
            <summary>
            Gets the nearest point on the line to the specified vector.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.LineSegment.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.LineSegment.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.LineSegment.End">
            <summary>
            The second point of the segment.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.LineSegment.Direction">
            <summary>
            The vector between point A and B.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.LineSegment.Length">
            <summary>
            The length of the line segment.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.SpaceHandler">
            <summary>
            Handler for ProxmitySpace.
            </summary>
            <param name="space">The space.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.SpaceDisplayHandler">
            <summary>
            Handler for Display.
            </summary>
            <param name="space">The space.</param>
            <param name="item">The display.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.SpacePresenceHandler">
            <summary>
            Handler for Presence
            </summary>
            <param name="space">The space.</param>
            <param name="item">The presence.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.SpaceVolumeHandler">
            <summary>
            Handler for Volume.
            </summary>
            <param name="space">The space.</param>
            <param name="item">The volume.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.SpaceDeviceHandler">
            <summary>
            Handler for CaptureDevice.
            </summary>
            <param name="space">The space.</param>
            <param name="item">The device.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.ProximitySpace">
            <summary>
            Represents a space locale that is monitored for proximity data.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.SetOrientation(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the space origin and orientation.
            </summary>
            <param name="newfront">The new front vector.</param>
            <param name="newup">The new up vector.</param>
            <param name="origin">The new origin.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.SetBounds(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the bounds of the space, aligned to its relative coordinate space.
            </summary>
            <param name="maxcorner">The maximum corner values.</param>
            <param name="mincorner">The minimum corner values.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ApplyRenderPerspective(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Applies the default perspective to the renderrer.
            </summary>
            <param name="r">The render mediator.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.BeginCalibration">
            <summary>
            Enter calibration mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.EndCalibration">
            <summary>
            Leave calibration mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ResetPerspective">
            <summary>
            Sets the flag to reset the perspective on the next render.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.HasPresence(System.String)">
            <summary>
            Checks whether the space contains a presence of a particular name.
            </summary>
            <param name="name">The name to check for.</param>
            <returns>True if the presence is found.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetPresence(System.String)">
            <summary>
            Gets a new or existing presence.
            </summary>
            <param name="name">The name of the presence.</param>
            <returns>The presence.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RemovePresence(System.String)">
            <summary>
            Removes a presence from the space.
            </summary>
            <param name="name">The name of the presence to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.HasDisplay(System.String)">
            <summary>
            Checks whether the space contains a display of a particular name.
            </summary>
            <param name="name">The name to check for.</param>
            <returns>True if the display is found.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetDisplay(System.Xml.XmlElement)">
            <summary>
            Gets a new or existing display, loading its properties from an XML definition.
            </summary>
            <param name="name">The name of the display.</param>
            <returns>The display.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetDisplay(System.String)">
            <summary>
            Gets a new or existing display.
            </summary>
            <param name="name">The name of the display.</param>
            <returns>The display.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RenameDisplay(System.String,System.String)">
            <summary>
            Changes the name of a display post-initialization.
            </summary>
            <param name="oldname">The old name of the display.</param>
            <param name="newname">The new name for the display.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RemoveDisplay(System.String)">
            <summary>
            Removes a display from the space.
            </summary>
            <param name="name">The name of the display to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ClearDisplays">
            <summary>
            Removes all displays from the space.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.HasVolume(System.String)">
            <summary>
            Checks whether the space contains a volume of a particular name.
            </summary>
            <param name="name">The name to check for.</param>
            <returns>True if the volume is found.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetVolume(System.Xml.XmlElement)">
            <summary>
            Gets a new or existing volume, loading its properties from an XML definition.
            </summary>
            <param name="name">The name of the volume.</param>
            <returns>The volume.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetVolume(System.String)">
            <summary>
            Gets a new or existing volume.
            </summary>
            <param name="name">The name of the volume.</param>
            <returns>The volume.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RenameVolume(System.String,System.String)">
            <summary>
            Changes the name of a volume post-initialization.
            </summary>
            <param name="oldname">The old name of the volume.</param>
            <param name="newname">The new name for the volume.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RemoveVolume(System.String)">
            <summary>
            Removes a volume from the space.
            </summary>
            <param name="name">The name of the volume to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ClearVolumes">
            <summary>
            Removes all volumes from the space.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.HasDevice(System.String)">
            <summary>
            Checks whether the device contains a display of a particular name.
            </summary>
            <param name="name">The name to check for.</param>
            <returns>True if the device is found.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetDevice(System.Xml.XmlElement)">
            <summary>
            Gets a new or existing device, loading its properties from an XML definition.
            </summary>
            <param name="name">The name of the device.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.GetDevice(System.String)">
            <summary>
            Gets a new or existing device.
            </summary>
            <param name="name">The name of the device.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RenameDevice(System.String,System.String)">
            <summary>
            Changes the name of a device post-initialization.
            </summary>
            <param name="oldname">The old name of the device.</param>
            <param name="newname">The new name for the device.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.RemoveDevice(System.String)">
            <summary>
            Removes a device from the space.
            </summary>
            <param name="name">The name of the device to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ClearDevices">
            <summary>
            Removes all devices from the space.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ToSchemeXML">
            <summary>
            Exports the space and fixed child presences to an XML file.
            </summary>
            <returns>The XML document.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ToXML(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Exports the properties of this space to an existing XML document.
            </summary>
            <param name="xdoc">The document to export to.</param>
            <param name="xeRoot">The XML root node to add on to.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.ToXML">
            <summary>
            Exports the properties of this space to a new XML document.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.ProximitySpace.FromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the properties of this space from an XML document.
            </summary>
            <param name="xdoc">The document to load from.</param>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.CalibrationStarted">
            <summary>
            Occurs when the space enters calibration mode.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.CalibrationEnded">
            <summary>
            Occurs when the space leaves calibration mode.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.Loaded">
            <summary>
            Occurs when the space attributes are loaded.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.SpaceUpdated">
            <summary>
            Occurs when the space is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DisplayAdded">
            <summary>
            Occurs when a display is added to the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DisplayUpdated">
            <summary>
            Occurs when a display in the space is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DisplayRemoved">
            <summary>
            Occurs when a display is removed from the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.PresenceAdded">
            <summary>
            Occurs when a presence is added to the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.PresenceUpdated">
            <summary>
            Occurs when a presence in the space is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.PresenceRemoved">
            <summary>
            Occurs when a presence is removed from the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.VolumeAdded">
            <summary>
            Occurs when a volume is added to the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.VolumeUpdated">
            <summary>
            Occurs when a volume in the space is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.VolumeRemoved">
            <summary>
            Occurs when a volume is removed from the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DeviceAdded">
            <summary>
            Occurs when a device is added to the space.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DeviceUpdated">
            <summary>
            Occurs when a device in the space is updated.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.ProximitySpace.DeviceRemoved">
            <summary>
            Occurs when a device is removed from the space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Displays">
            <summary>
            The collection of displays in this space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Volumes">
            <summary>
            The collection of volumes in this space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Presences">
            <summary>
            The collection of presences in this space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Devices">
            <summary>
            The collection of devices in this space.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.AbsOrigin">
            <summary>
            The origin of the space in absolute coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.AbsFront">
            <summary>
            The front vector of the space in absolute coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.AbsUp">
            <summary>
            The up vector of the space in absolute coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.AbsRight">
            <summary>
            The right vector of the space in absolute coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.MaxCorner">
            <summary>
            The maximum corner of the space, relative to the origin.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.MinCorner">
            <summary>
            The minimum corner of the space, relative to the origin.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Width">
            <summary>
            The width of the space (left to right).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Height">
            <summary>
            The height of the space (bottom to top).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.Depth">
            <summary>
            The depth of the space (front to back).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.IsCalibrating">
            <summary>
            Gets or sets the flag for calibration mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.ProximitySpace.IsCalibrated">
            <summary>
            Gets whether the space has a valid calibration.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.Volume">
            <summary>
            Represents a complex 3D volume composed of polygons.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IFixed">
            <summary>
            Interface used to represent an object that is not tracked, and is assumed to remain fixed in the space.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.ILocatable">
            <summary>
            Interface used to represent an object that has an absolute location in the space.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IMovable">
            <summary>
            Interface used to represent an object that can change location.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.BeginDefining">
            <summary>
            Puts the Presence into definition mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.EndDefining">
            <summary>
            Takes the Presence out of definition mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.ApplyTransform">
            <summary>
            Applies the local transformation to all vertices, then clears it.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.ApplyTransform(ProximityToolkit.Matrix)">
            <summary>
            Applies a transformation to all vertices.
            </summary>
            <param name="m">The matrix transformation to apply.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the volume.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.InitProperties">
            <summary>
            Initializes any node properties that cannot be detected automatically.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.ToXML">
            <summary>
            Serializes the data from this presence into an XML Document.
            </summary>
            <returns>The resulting XML document.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.ToXML(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Appends the data from this presence onto an XML element.
            </summary>
            <param name="xeRoot">The XML element to append to.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.FromXML(System.Xml.XmlDocument)">
            <summary>
            Loads data into this presence from an XML document.
            </summary>
            <param name="xdoc">The XML document to load from.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.Volume.FromXML(System.Xml.XmlElement)">
            <summary>
            Load data into this presence from an XML element.
            </summary>
            <param name="xe">The XML element to load from.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.IsSolid">
            <summary>
            Gets or sets whether the volume is solid or hollow.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.IsDefining">
            <summary>
            Gets whether this object is in defining mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.DataLock">
            <summary>
            Gets the data locking object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.Wireframe">
            <summary>
            Gets the underlying Wireframe model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.Location">
            <summary>
            Gets or sets the location point representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.Velocity">
            <summary>
            Gets or sets the velocity vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.Acceleration">
            <summary>
            Gets or sets the acceleration vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.Volume.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IPointer">
            <summary>
            Interface used to represent a direction of pointing from an object.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IRotatable">
            <summary>
            Interface used to represent an object that can be rotated in the space.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Module.ModuleSettingUpdatedEventArgs">
            <summary>
            Event arguments for a module setting update.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Module.ModuleSettingUpdatedEventArgs.Key">
            <summary>
            The setting key.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Module.ModuleSettingUpdatedEventArgs.Value">
            <summary>
            The setting value.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Module.ModuleSettingUpdatedEventArgs.Saved">
            <summary>
            Whether the update has been saved.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Module.ModuleSettingUpdatedHandler">
            <summary>
            Handler for Updated module settings.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">The parameters.</param>
        </member>
        <member name="T:ProximityToolkit.Module.ModuleSettings">
            <summary>
            Handles storage and serialization/deserialization of module settings.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Add(System.String,System.String)">
            <summary>
            Adds a new key/value pair to the collection.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="value">The value for the setting.</param>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Remove(System.String)">
            <summary>
            Removes a setting from the collection.
            </summary>
            <param name="key">The key of the setting to remove.</param>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Clear">
            <summary>
            Clears all settings from the collection.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Escape(System.String)">
            <summary>
            Escapes separator characters.
            </summary>
            <param name="str">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Unescape(System.String)">
            <summary>
            Unescapes separator characters.
            </summary>
            <param name="str">The string to unescape.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.BeginUpdate">
            <summary>
            Puts the collection into update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.EndUpdate">
            <summary>
            Takes the collection out of update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.ToString">
            <summary>
            Serializes this collection as a string.
            </summary>
            <returns>A string representation of this collection.</returns>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.FromString(System.String)">
            <summary>
            Deserializes the collection from a string.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Module.ModuleSettings.Define(System.String,System.String)">
            <summary>
            Initializes a module setting.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="value">The default value for the setting.</param>
        </member>
        <member name="E:ProximityToolkit.Module.ModuleSettings.ModuleSettingUpdated">
            <summary>
            Occurs when a module setting is updated.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Module.ModuleSettings.Item(System.String)">
            <summary>
            Gets or sets the value of a setting.
            </summary>
            <param name="key">The key to get or set.</param>
        </member>
        <member name="P:ProximityToolkit.Module.ModuleSettings.Owner">
            <summary>
            The ProximityInputModule that owns this collection of settings.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IMarkerCollection">
            <summary>
            Interface used to represent a collection of markers.
            </summary>
        </member>
        <member name="T:ProximityToolkit.PresenceType">
            <summary>
            Enumeration representing the presence types supported by the ProximityToolkit.
            </summary>
        </member>
        <member name="T:ProximityToolkit.PresenceMonitor">
            <summary>
            Enumeration to represent one or more presence monitor types.
            </summary>
        </member>
        <member name="T:ProximityToolkit.PresenceUpdateHandler">
            <summary>
            Handler for PresenceEventArgs.
            </summary>
            <param name="presence">The presence.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ProximityToolkit.LocationHandler">
            <summary>
            Presence handler for ILocatable.
            </summary>
            <param name="presence">The presence.</param>
            <param name="data">The args.</param>
        </member>
        <member name="T:ProximityToolkit.DirectionHandler">
            <summary>
            Presence handler for IDirectable.
            </summary>
            <param name="presence">The presence.</param>
            <param name="data">The args.</param>
        </member>
        <member name="T:ProximityToolkit.OrientationHandler">
            <summary>
            Presence handler for ILocatable.
            </summary>
            <param name="presence">The presence.</param>
            <param name="data">The args.</param>
        </member>
        <member name="T:ProximityToolkit.RotationHandler">
            <summary>
            Presence handler for IRotatable.
            </summary>
            <param name="presence">The presence.</param>
            <param name="data">The args.</param>
        </member>
        <member name="T:ProximityToolkit.MotionHandler">
            <summary>
            Presence handler for IMovable.
            </summary>
            <param name="presence">The presence.</param>
            <param name="data">The args.</param>
        </member>
        <member name="T:ProximityToolkit.PresenceEventArgs">
            <summary>
            Collection of properties from a proximity event notification.
            </summary>
        </member>
        <member name="T:ProximityToolkit.IPresenceEventArgs">
            <summary>
            Interface for Presence Event Arguments.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.Presence">
            <summary>
            Gets the presence to which the args apply.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ActualMonitor">
            <summary>
            Gets the actual monitor data contained in the args.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.RequestedMonitor">
            <summary>
            Gets the original monitor data requested.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ProxemicDirection">
            <summary>
            Gets the Proxemic Direction object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ProxemicLocation">
            <summary>
            Gets the Proxemic Location object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ProxemicMotion">
            <summary>
            Gets the Proxemic Motion object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ProxemicOrientation">
            <summary>
            Gets the Proxemic Orientation object.
            </summary>
        </member>
        <member name="P:ProximityToolkit.IPresenceEventArgs.ProxemicRotation">
            <summary>
            Gets the Proxemic Rotation object.
            </summary>
        </member>
        <member name="M:ProximityToolkit.PresenceEventArgs.#ctor(ProximityToolkit.Presence.PresenceBase)">
            <summary>
            Constructs and instance of PresenceEventArgs.
            </summary>
            <param name="pres">The presence.</param>
        </member>
        <member name="M:ProximityToolkit.PresenceEventArgs.#ctor(ProximityToolkit.Presence.PresenceBase,ProximityToolkit.PresenceMonitor)">
            <summary>
            Construct an instance of PresenceEventArgs.
            </summary>
            <param name="pres">The presence.</param>
            <param name="reqmon">The requested monitors.</param>
        </member>
        <member name="M:ProximityToolkit.PresenceEventArgs.GetRelationArgs(ProximityToolkit.RelationMonitor)">
            <summary>
            Queries this object for relation arguments by relation type.
            </summary>
            <param name="type">The relation type to query for.</param>
            <returns>The matching relation arguments.</returns>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.Presence">
            <summary>
            The presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.RequestedMonitor">
            <summary>
            The original relation attributes requested.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ActualMonitor">
            <summary>
            The valid relation attributes returned.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ProxemicDirection">
            <summary>
            The set of attributes related to direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ProxemicLocation">
            <summary>
            The set of attributes related to location.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ProxemicOrientation">
            <summary>
            The set of attributes related to orientation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ProxemicRotation">
            <summary>
            The set of attributes related to rotation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.PresenceEventArgs.ProxemicMotion">
            <summary>
            The set of attributes related to motion.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Sphere">
            <summary>
            Collision object representing a sphere.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Set(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="centroid">The centre of the sphere.</param>
            <param name="radius">The radius of the sphere in all directions.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="centroid">The centre of the sphere.</param>
            <param name="radius">The radius of the sphere for each direction.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="centroid">The centre of the sphere.</param>
            <param name="xaxis">The X-axis for the sphere.</param>
            <param name="yaxis">The Y-axis for the sphere.</param>
            <param name="zaxis">The Z-axis for the sphere.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Contains(ProximityToolkit.Vector3)">
            <summary>
            Gets whether a point is within the sphere.
            </summary>
            <param name="point">The point to check.</param>
            <returns>Whether contained.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Sphere.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.Centroid">
            <summary>
            The center point of the sphere.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.Radius">
            <summary>
            The radius of the sphere about the centroid in the X, Y, and Z directions.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.Basis">
            <summary>
            The transformation matrix defining this sphere.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.XRadius">
            <summary>
            Gets the radius of the elliptoid along the X axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.YRadius">
            <summary>
            Gets the radius of the elliptoid along the Y axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.ZRadius">
            <summary>
            Gets the radius of the elliptoid along the Z axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.Volume">
            <summary>
            Gets the volume of the ellipsoid.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.IsOblate">
            <summary>
            Gets whether the elliptoid is disc-shaped.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.IsProlate">
            <summary>
            Gets whether the elliptoid is football-shaped.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.IsSphere">
            <summary>
            Gets whether the elliptoid is sphere-shaped.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.IsScalene">
            <summary>
            Gets whether the elliptoid is football-shaped.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Sphere.SurfaceArea">
            <summary>
            Gets the surface area of the ellipsoid.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Wireframe">
            <summary>
            A simple polygonal mesh structure.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.BeginDefining">
            <summary>
            Puts the Presence into definition mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.EndDefining">
            <summary>
            Takes the Presence out of definition mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.Clear">
            <summary>
            Clears all polygon, edge, and vertex data.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.GetVertex(System.Int32)">
            <summary>
            Gets the vertex at a particular index.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The requested vertex.</returns>
        </member>
        <member name="M:ProximityToolkit.Wireframe.GetPolygon(System.Int32)">
            <summary>
            Gets the polygon at a particular index.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The requested vertex.</returns>
        </member>
        <member name="M:ProximityToolkit.Wireframe.GetEnds(ProximityToolkit.Wireframe.Edge)">
            <summary>
            Gets the ending coordinates on an edge.
            </summary>
            <param name="e">The edge from which to retrieve the ending points.</param>
            <returns>An array of 2 vertices.</returns>
        </member>
        <member name="M:ProximityToolkit.Wireframe.GetCorners(ProximityToolkit.Wireframe.Polygon)">
            <summary>
            Gets the corner coordinates on a polygon.
            </summary>
            <param name="poly">The polygon from which to retrieve the corner points.</param>
            <returns>An array of 3 vertices.</returns>
        </member>
        <member name="M:ProximityToolkit.Wireframe.AddVertex(ProximityToolkit.Vector3)">
            <summary>
            Adds a vertex to the model.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.RemoveVertex(System.Int32)">
            <summary>
            Removes a vertex from the model, and any associated edges and polygons.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.UpdateCentroid">
            <summary>
            Refreshes the centroid of the model.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.AddPolygon(ProximityToolkit.Vector3[])">
            <summary>
            Adds a polygon to the model, from 3 corners.
            </summary>
            <param name="corners">An array of corner coordinates.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.AddPolygon(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Adds a polygon to the model, from 3 vectors.
            </summary>
            <param name="p1">The first vector.</param>
            <param name="p2">The second vector.</param>
            <param name="p3">The third vector.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.AddPolygon(ProximityToolkit.Wireframe.Polygon)">
            <summary>
            Adds a polygon to the model.
            </summary>
            <param name="p">The polygon to add.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.SetVertex(ProximityToolkit.Vector3)">
            <summary>
            Sets a tentative value for the next vertex.
            </summary>
            <param name="vertex">The value.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.SetVertex(ProximityToolkit.Vector3,System.Int32)">
            <summary>
            Sets a value for an existing vertex.
            </summary>
            <param name="vertex">The new value.</param>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.Next">
            <summary>
            Accepts the current value and advances to the next.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.Previous">
            <summary>
            Returns to the previous vertex.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.ApplyTransform(ProximityToolkit.Matrix)">
            <summary>
            Applies a transformation to all vertices.
            </summary>
            <param name="m">The matrix transformation to apply.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.Render(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the volume.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Wireframe.RenderDefinition(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Render the wireframe during definition mode.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.Wireframe.Vertices">
            <summary>
            Gets or sets the list of vertices in the model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.VertexCount">
            <summary>
            The total number of vertices in this model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.Edges">
            <summary>
            Gets the list of edges in the model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.EdgeCount">
            <summary>
            The total number of edges in this model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.Polygons">
            <summary>
            Gets or sets the list of polygons in this model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.PolygonCount">
            <summary>
            The total number of polygons in this model.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.IsSolid">
            <summary>
            Gets or sets whether the volume is solid or hollow.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.IsDefining">
            <summary>
            Gets whether this object is in defining mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Wireframe.Centroid">
            <summary>
            Gets or sets the location point representative of the presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Wireframe.Edge">
            <summary>
            An edge consisting of 2 vertices.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Wireframe.Edge.Ends">
            <summary>
            The two ends of the edge.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Wireframe.Polygon">
            <summary>
            A polygon consisting of 3 vertices.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Wireframe.Polygon.Corners">
            <summary>
            The three corners of the polygon.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Wireframe.Polygon.GetEdges">
            <summary>
            Gets the list of 3 edges making up this polygon.
            </summary>
            <returns>An array of Edges.</returns>
        </member>
        <member name="T:ProximityToolkit.Presence.PresenceMarker">
            <summary>
            Represents a marker in a kinematic skeleton.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.IMarker">
            <summary>
            Interface used to represent a marker in a tracked object or kinematic skeleton.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.Update(System.Single,System.Boolean,System.Boolean,ProximityToolkit.Vector3)">
            <summary>
            Updates the data in this marker.
            </summary>
            <param name="confidence">The confidence value of the data.</param>
            <param name="visible">Whether the marker is visible.</param>
            <param name="absolute">Whether the data is absolute or relative.</param>
            <param name="newlocation">The new location value for the marker.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.MergeUpdate(ProximityToolkit.Presence.IMarker,ProximityToolkit.Matrix)">
            <summary>
            Update this marker from another marker.
            </summary>
            <param name="marker">The data source marker.</param>
            <param name="transform">The transformation to apply to the marker data.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Gets the details of the collision or non-collision of this and another collidible object.
            </summary>
            <param name="obj">The collidible object to check for collision.</param>
            <returns>The details of the collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Render the collidible volume.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle setting the smoothing filter for history properties within this node.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback to handle custom renderring procedures for Presences.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresenceMarker.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to apply the necessary transformation to existing internal data when changing between absolute/relative mode.
            </summary>
            <param name="trans">The transformation to apply.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.Location">
            <summary>
            Gets the marker coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.LocationHistory">
            <summary>
            Gets the recent history of the marker coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.Velocity">
            <summary>
            Gets the velocity vector of the marker.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.VelocityHistory">
            <summary>
            Gets the recent history of velocity vectors of the marker.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.Acceleration">
            <summary>
            Gets the acceleration vector of the marker.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.AccelerationHistory">
            <summary>
            Gets the recent history of acceleration vectors of the marker.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.CollisionObject">
            <summary>
            Gets the object to use for collision detection.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.CollisionType">
            <summary>
            Gets the type to interpret the collision object as.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresenceMarker.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.OrientationDecorator">
            <summary>
            Decorator to represent the orientation of a presence.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.OrientationDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,ProximityToolkit.Angle,ProximityToolkit.Angle,ProximityToolkit.Angle)">
            <summary>
            Updates the orientation data for this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="newincline">The updated incline data.</param>
            <param name="newazimuth">The updated azimuth data.</param>
            <param name="newroll">The updated roll data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.OrientationDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.InclineAngle">
            <summary>
            Gets the angle from the horizontal plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.InclineHistory">
            <summary>
            Gets the recent history of incline values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.AzimuthAngle">
            <summary>
            Gets the angle from the X-axis, about the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.AzimuthHistory">
            <summary>
            Gets the recent history of azimuth values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.RollAngle">
            <summary>
            Gets the angle from the upward direction from the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.OrientationDecorator.RollHistory">
            <summary>
            Gets the recent history of roll values.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Box">
            <summary>
            Collision object representing a 6-sided box.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the box data using a corner/length representation.
            </summary>
            <param name="corner">The origin corner.</param>
            <param name="xlength">The width-wise corner.</param>
            <param name="ylength">The height-wise corner.</param>
            <param name="zlength">The length-wise corner.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetTopSide">
            <summary>
            Gets the top face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetBottomSide">
            <summary>
            Gets the bottom face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetRightSide">
            <summary>
            Gets the right face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetLeftSide">
            <summary>
            Gets the left face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetFrontSide">
            <summary>
            Gets the front face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.GetBackSide">
            <summary>
            Gets the back face as a Square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.Clone">
            <summary>
            Creates an exact copy of this object with a different object reference.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Box.Clone(ProximityToolkit.Matrix)">
            <summary>
            Creates a copy of this object, applying the given transformation.
            </summary>
            <param name="trans">The transformation to apply.</param>
            <returns>The cloned object</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Corners">
            <summary>
            The collection of the corners of this cube.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.OriginCorner">
            <summary>
            The origin corner of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.XCorner">
            <summary>
            The Width-wise corner of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.YCorner">
            <summary>
            The Height-wise corner of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.ZCorner">
            <summary>
            The Length-wise corner of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Centroid">
            <summary>
            The center point of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Basis">
            <summary>
            The transformation matrix for this box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Width">
            <summary>
            The distance between the origin and 1st corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Height">
            <summary>
            The distance between the origin and 2nd corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Length">
            <summary>
            The distance between the origin and 3rd corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.XAxis">
            <summary>
            The vector from the origin to the 1st corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.YAxis">
            <summary>
            The vector from the origin to the 2nd corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.ZAxis">
            <summary>
            The vector from the origin to the 3rd corner.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Faces">
            <summary>
            The collection of the faces of this cube.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.BottomFace">
            <summary>
            The bottom face of this cube. Corners = (0, 1, 3, 5)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.FrontFace">
            <summary>
            The front face of this cube. Corners = (7, 6, 5, 1)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.TopFace">
            <summary>
            The top face of this cube. Corners = (2, 6, 4, 7)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.BackFace">
            <summary>
            The back face of this cube. Corners = (2, 4, 0, 3)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.RightFace">
            <summary>
            The right face of this cube. Corners = (6, 2, 1, 0)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.LeftFace">
            <summary>
            The left face of this cube. Corners = (4, 7, 3, 5)
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.Volume">
            <summary>
            Gets the volume of the box.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Box.SurfaceArea">
            <summary>
            Gets the surface area of the box.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.DisplayPlaneHandler">
            <summary>
            Handler for DisplayPlane.
            </summary>
            <param name="display">The display.</param>
        </member>
        <member name="T:ProximityToolkit.Presence.DisplayPlane">
            <summary>
            Represents the spatiality of a rectangular display.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FixDeviceName(System.String)">
            <summary>
            Fixes a logical display device name to a friendly string.
            </summary>
            <param name="devicename">The device name to fix.</param>
            <returns>The fixed device name.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.Set(ProximityToolkit.Vector3[])">
            <summary>
            Sets the display plane bounds using 3 or 4 corners.
            </summary>
            <param name="corners">An array of 3 to 4 coordinates.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.Set(System.Nullable{ProximityToolkit.Vector3},System.Nullable{ProximityToolkit.Vector3},System.Nullable{ProximityToolkit.Vector3},System.Nullable{ProximityToolkit.Vector3})">
            <summary>
            Sets the display plane bounds using any combination of 3 corners.
            </summary>
            <param name="topleft">The top left corner, if known.</param>
            <param name="topright">The top right corner, if known.</param>
            <param name="bottomleft">The bottom left corner, if known.</param>
            <param name="bottomright">The bottom right corner, if known.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.SetCorner(System.Int32,ProximityToolkit.Vector3)">
            <summary>
            Sets the coordinate of a corner.
            </summary>
            <param name="index">The index of the corner to set: 0=topleft, 1=topright, 2=bottomleft, 3=bottomright.</param>
            <param name="value">The new coordinate to set.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.GetCorner(System.Int32)">
            <summary>
            Gets the coordinate of a corner.
            </summary>
            <param name="index">The index of the corner to get:  0=topleft, 1=topright, 2=bottomleft, 3=bottomright.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.OnBeginUpdate">
            <summary>
            Puts the presence into the mode to accept updates.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ApplyTransform">
            <summary>
            Applies the local transformation to all components, then clears it.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ApplyTransform(ProximityToolkit.Matrix)">
            <summary>
            Applies a matrix transformation to all components.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToPlane(ProximityToolkit.Vector3)">
            <summary>
            Transforms a vector into this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromPlane(ProximityToolkit.Vector3)">
            <summary>
            Translates a vector out of this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToPlane(ProximityToolkit.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Transforms a vector into this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromPlane(ProximityToolkit.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Translates a vector out of this plane's coordinate space.
            </summary>
            <param name="v">The vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToScreen(ProximityToolkit.Vector3)">
            <summary>
            Transforms a world vector to a corresponding screen coordinate.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromScreen(ProximityToolkit.DisplayPoint)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of this presence.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.BeginDefining">
            <summary>
            Puts the display into calibration mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.EndDefining">
            <summary>
            Finalizes the calibration and takes the display out of calibration mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToSettingString">
            <summary>
            Serializes the data from this display for storage in the application settings.
            </summary>
            <returns>The settings string.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromSettingString(System.String)">
            <summary>
            Parses an application settings string to load data into this display.
            </summary>
            <param name="settings">The string containing settings data.</param>
            <returns>True if the data was loaded successfully.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.InitProperties">
            <summary>
            Initializes any node properties that cannot be detected automatically.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.SystemEvents_DisplaySettingsChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a screen resolution change.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Gets the collision details between this and another collidible object.
            </summary>
            <param name="obj">The object to check for a collision with this one.</param>
            <returns>The details of the collision or non-collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collision volume.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToXML">
            <summary>
            Serializes the data from this presence into an XML Document.
            </summary>
            <returns>The resulting XML document.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.ToXML(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Appends the data from this presence onto an XML element.
            </summary>
            <param name="xeRoot">The XML element to append to.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromXML(System.Xml.XmlDocument)">
            <summary>
            Loads data into this presence from an XML document.
            </summary>
            <param name="xdoc">The XML document to load from.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.FromXML(System.Xml.XmlElement)">
            <summary>
            Load data into this presence from an XML element.
            </summary>
            <param name="xe">The XML element to load from.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayPlane.Update(System.Single,System.Boolean,System.Boolean,ProximityToolkit.Vector3[])">
            <summary>
            Updates the geometry of an attached display.
            </summary>
            <param name="confidence">The confidence value of the data.</param>
            <param name="visible">Whether the presence is visible or not.</param>
            <param name="absolute">Whether the data is absolute or relative.</param>
            <param name="newcorners">The new corner coordinates.</param>
            <returns>True if the update is accepted.</returns>
        </member>
        <member name="E:ProximityToolkit.Presence.DisplayPlane.CalibrationStarted">
            <summary>
            Occurs when the display enters Calibration mode.
            </summary>
        </member>
        <member name="E:ProximityToolkit.Presence.DisplayPlane.CalibrationEnded">
            <summary>
            Occurs when the display exits Calibration mode.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Plane">
            <summary>
            Gets the underlying plane square that defines the display spatiality.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Width">
            <summary>
            The width of the display in world units.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Height">
            <summary>
            The height of the display in world units.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.HasArea">
            <summary>
            Gets whether the display has a valid area.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Normal">
            <summary>
            Gets the normal vector to the plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.DisplayScreen">
            <summary>
            Gets or sets the associated screen.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.DisplayBounds">
            <summary>
            Gets the associated screen dimensions.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.HasDisplayArea">
            <summary>
            Gets whether the logical display bounds have a valid area.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.IsCalibrated">
            <summary>
            Returns true if the display area has been calibrated.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.IsCalibrating">
            <summary>
            Returns true if the display has entered calibration state.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.IsMapped">
            <summary>
            Returns true if the display has a proper internal coordinate system.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Confidence">
            <summary>
            Returns the data confidence value between 0 (uncertain) and 1 (certain).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Corners">
            <summary>
            Gets or sets the corner coordinates for the display.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.CollisionObject">
            <summary>
            Gets the collidible object for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.CollisionType">
            <summary>
            Gets the collidible type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Location">
            <summary>
            Gets or sets the location point representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Velocity">
            <summary>
            Gets or sets the velocity vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.Acceleration">
            <summary>
            Gets or sets the acceleration vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.InclineAngle">
            <summary>
            Gets the angle from the horizontal plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.AzimuthAngle">
            <summary>
            Gets the angle from the X-axis, about the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.RollAngle">
            <summary>
            Gets the angle of the rotation of the up direction about the forward direction.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.TouchDistance">
            <summary>
            Gets or sets the threshold distance along the direction vector that is considered a touch.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayPlane.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.PresenceHandler">
            <summary>
            Handler for PresenceBase.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ProximityToolkit.Presence.PresenceProperyHandler">
            <summary>
            Handler for PresenceProperty.
            </summary>
            <param name="obj">The presence object.</param>
            <param name="prop">The property.</param>
        </member>
        <member name="T:ProximityToolkit.Collision.CompositeFunction">
            <summary>
            Combination method for a CollisionComposite object.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.CollisionComposite">
            <summary>
            Treats a set of collision objects as a single volume.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionComposite.Add(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Adds a collision volume to the set.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionComposite.Remove(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Removes a collision volume from the set.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionComposite.Clear">
            <summary>
            Clears all collision volumes from the set.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionComposite.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Computes the details of a collision with another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>The details of the collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.CollisionComposite.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the volume of this collidible object.
            </summary>
            <param name="r"></param>
        </member>
        <member name="T:ProximityToolkit.Collision.Square">
            <summary>
            Collision class representing a plane bounded by 4 corners.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.GetCorner(System.Int32)">
            <summary>
            Retrieves the coordinate at the requested index, with bounds checking.
            </summary>
            <param name="index">The index of the desired corner.</param>
            <returns>The corner at the requested index.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="topleft">Top left corner of the square.</param>
            <param name="xedge">The X-edge of the square.</param>
            <param name="yedge">The Y-edge of the square.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.Set(ProximityToolkit.Matrix)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="newbasis">A matrix representing the new coordinate system.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.Contains(ProximityToolkit.Vector3)">
            <summary>
            Returns true if the given point (in plane coordinates) is contained within the display bounds.
            </summary>
            <param name="pt">The point to check.</param>
            <returns>True if it is contained, False if not.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Square.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Corners">
            <summary>
            Returns the set of corners of the plane square.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Edges">
            <summary>
            Returns the collection of edges of the plane square.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Center">
            <summary>
            Returns the location of the center of the display in world coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Width">
            <summary>
            Returns the width of the display in world units.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Height">
            <summary>
            Returns the height of the display in world units.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Location">
            <summary>
            Returns the coordinates of the top left-hand corner of the display area, in plane coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Size">
            <summary>
            Returns the size of the display area in world units.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.Area">
            <summary>
            Gets the square area of the plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Collision.Square.SurfaceArea">
            <summary>
            Gets the surface area of the plane.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.MotionDecorator">
            <summary>
            Decorator to represent the motion of a presence.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.MotionDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Updates the motion data for this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="newveloc">The updated velocity data.</param>
            <param name="newaccel">The updated acceleration data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.MotionDecorator.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle a changed smoothing filter.
            </summary>
            <param name="filter">The new filter.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.MotionDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.MotionDecorator.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to handle transforming data to the correct coordinate system.
            </summary>
            <param name="trans">The transformation to the new coordinate system.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.MotionDecorator.Velocity">
            <summary>
            Gets or sets the velocity vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.MotionDecorator.VelocityHistory">
            <summary>
            Gets the recent history of velocity values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.MotionDecorator.Acceleration">
            <summary>
            Gets or sets the acceleration vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.MotionDecorator.AccelerationHistory">
            <summary>
            Gets the recent history of acceleration values.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.MarkerDecorator">
            <summary>
            Decorator to represent a collection of markers associated with a presence.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.MarkerDecorator.markers">
            <summary>
            Occurs when a marker is removed from the collection.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.MarkerDecorator.GetMarker(System.String)">
            <summary>
            Gets a new or existing marker with the specified name.
            </summary>
            <param name="name">The name of the marker to retrieve.</param>
            <returns>A marker with the given name.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.MarkerDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,System.String,ProximityToolkit.Vector3)">
            <summary>
            Updates a particular marker in this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="markername">The name of the marker to update.</param>
            <param name="newlocation">The new location for the marker.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.MarkerDecorator.OnDispatchUnhandled(System.String,System.Object,System.Boolean)">
            <summary>
            Handle creating markers based on unhandled remote updates on the decorator's root key.
            </summary>
            <param name="key">The unhandled key.</param>
            <param name="value">The unhandled value.</param>
            <param name="removed">Whether this update is a removal.</param>
            <returns>True if the update was handled by this method.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.MarkerDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="E:ProximityToolkit.Presence.MarkerDecorator.MarkerAdded">
            <summary>
            Occurs when a marker is added to the collection.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.MarkerDecorator.Markers">
            <summary>
            The collection of markers in this decorator.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.MarkerDecorator.Item(System.Int32)">
            <summary>
            Gets the marker at a particular index.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The marker at the given index.</returns>
        </member>
        <member name="T:ProximityToolkit.Debug.DebugTimer">
            <summary>
            Used for measuring time intervals.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugTimer.Start(System.String,System.Boolean)">
            <summary>
            Begins a timer by recording the start time.
            </summary>
            <param name="name">Unique name for the timer.</param>
            <param name="verbose">Output information to the console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugTimer.Stop(System.String,System.Boolean)">
            <summary>
            Stops a timer and calculates elapsed time.
            </summary>
            <param name="name">Name of the timer.</param>
            <param name="verbose">Output information to console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugTimer.Tick(System.String,System.Boolean)">
            <summary>
            Gets elapsed time and resets timer.
            </summary>
            <param name="name">Name of the timer.</param>
            <param name="verbose">Output information to console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugTimer.Tick(System.String,System.Boolean,System.Single,System.String)">
            <summary>
            Gets elapsed time and resets timer.
            </summary>
            <param name="name">Name of the timer.</param>
            <param name="verbose">Output information to console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugTimer.ClearAll(System.Boolean)">
            <summary>
            Stops all timers.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Ray">
            <summary>
            Collision class that represents a single-bounded line.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Ray.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Ray.NearestPoint(ProximityToolkit.Vector3)">
            <summary>
            Gets the nearest point on the line to the specified vector.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Ray.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Ray.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="T:ProximityToolkit.Presence.TrackedPresence">
            <summary>
            Represents an object of interest that is tracked by InputModules.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.OnDispatchUnhandled(System.String,System.Object,System.Boolean)">
            <summary>
            Callback for dealing with unhandled updates.
            </summary>
            <param name="key">The key that is being updated.</param>
            <param name="value">The updated value.</param>
            <param name="removed">Whether the notification is due to a removal.</param>
            <returns>True if the update is handled.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.OnEndUpdate">
            <summary>
            Callback to handle custom Presence actions when exiting update mode.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.HasSource(ProximityToolkit.Module.IProximityInputModule)">
            <summary>
            Gets whether a particular source is an input for this presence.
            </summary>
            <param name="source">The source to check for.</param>
            <returns>True if source is an input.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.AddSource(ProximityToolkit.Module.IProximityInputModule)">
            <summary>
            Sets the source Input Module for this presence, post initialziation.
            </summary>
            <param name="source">The new Input Module.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.RemoveSource(ProximityToolkit.Module.IProximityInputModule)">
            <summary>
            Removes an input source for this presence.
            </summary>
            <param name="oldsource">The old Input Module.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.GetPointer(System.String)">
            <summary>
            Attempts to retrieve a particular pointer from the presence.
            </summary>
            <param name="name">The name to find.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.GetMarker(System.String)">
            <summary>
            Attempts to retrieve a particular marker from the presence.
            </summary>
            <param name="name">The name to find.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.GetDisplay(System.String)">
            <summary>
            Attempts to retrieve a particular attached display from the presence.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.HasDecorator(System.String)">
            <summary>
            Gets whether this presence contains a particular data decorator.
            </summary>
            <param name="key">The name of the decorator.</param>
            <returns>True if the decorator exists.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.GetDecorator(System.Type)">
            <summary>
            Gets a new or existing data decorator.
            </summary>
            <param name="type">The type of the decorator.</param>
            <returns>A decorator of this presence of the requested type.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Gets the collision details between this and another collidible object.
            </summary>
            <param name="obj">The object to check for a collision with this one.</param>
            <returns>The details of the collision or non-collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.TrackedPresence.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collision volume.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.Decorators">
            <summary>
            Gets the collection of data decorators.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.ModelCollisionVolume">
            <summary>
            Gets or sets the collision volume for the presence, in relative coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.Sources">
            <summary>
            Gets the list of input sources contributing to this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.CollisionObject">
            <summary>
            Gets the collidible object for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.TrackedPresence.CollisionType">
            <summary>
            Gets the collidible type for this presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.CaptureDevice">
            <summary>
            Represents the spatiality of a device used by an InputModule to capture or output data.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.BeginDefining">
            <summary>
            Puts the device into calibration mode, where spatial parameters can be set.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.EndDefining">
            <summary>
            Takes the device out of calibration mode and updates the geometry.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.SetOrientation(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the spatial properties of the device.
            </summary>
            <param name="newloc">The new location vector.</param>
            <param name="newfront">The new front vector.</param>
            <param name="newup">The new up vector.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.SetFrustrum(System.Double,System.Double,System.Double)">
            <summary>
            Sets the capture properties of the device.
            </summary>
            <param name="newwidth">The new frustrum width.</param>
            <param name="newheight">The new frustrum height.</param>
            <param name="newdepth">The new frustrum depth.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.ApplyTransform">
            <summary>
            Applies the local transformation to all components, then clears it.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.ApplyTransform(ProximityToolkit.Matrix)">
            <summary>
            Applies a matrix transformation to all components.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders a visualization of this presence.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.ToXML">
            <summary>
            Serializes the data from this presence into an XML Document.
            </summary>
            <returns>The resulting XML document.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.ToXML(System.Xml.XmlElement)">
            <summary>
            Appends the data from this presence onto an XML element.
            </summary>
            <param name="xeRoot">The XML element to append to.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.FromXML(System.Xml.XmlDocument)">
            <summary>
            Loads data into this presence from an XML document.
            </summary>
            <param name="xdoc">The XML document to load from.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.CaptureDevice.FromXML(System.Xml.XmlElement)">
            <summary>
            Load data into this presence from an XML element.
            </summary>
            <param name="xe">The XML element to load from.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.Location">
            <summary>
            Gets the location point representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.Velocity">
            <summary>
            Gets the velocity vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.Acceleration">
            <summary>
            Gets the acceleration vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.InclineAngle">
            <summary>
            Gets the angle from the horizontal plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.AzimuthAngle">
            <summary>
            Gets the angle from the X-axis, about the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.RollAngle">
            <summary>
            Gets the angle from the upward direction from the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.Direction">
            <summary>
            Gets or sets the direction vector.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.TouchDistance">
            <summary>
            Gets or sets the threshold distance along the direction vector that is considered a touch.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.Up">
            <summary>
            Gets or sets the up vector, indicating the direction of the top of the device at a 90 degree angle to the front vector.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.FrustrumWidth">
            <summary>
            Gets or sets the width of the capture frustrum.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.FrustrumHeight">
            <summary>
            Gets or sets the height of the capture frustrum.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.CaptureDevice.FrustrumDepth">
            <summary>
            Gets or sets the depth of the capture frustrum.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Debug.DebugCounter">
            <summary>
            Used for tallying.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCounter.Increment(System.String,System.Boolean)">
            <summary>
            Increments a counter value.
            </summary>
            <param name="name">Unique name for the counter.</param>
            <param name="verbose">Output information to the console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCounter.Decrement(System.String,System.Boolean)">
            <summary>
            Decrements a counter value.
            </summary>
            <param name="name">Unique name for the counter.</param>
            <param name="verbose">Output information to the console?</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCounter.Check(System.String)">
            <summary>
            Outputs a counter value.
            </summary>
            <param name="name">The counter name.</param>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCounter.Clear(System.String,System.Boolean)">
            <summary>
            Stops a timer and calculates elapsed time.
            </summary>
            <param name="name">Name of the timer.</param>
            <param name="verbose">Output information to console?</param>
            <returns>The elapsed timespan.</returns>
        </member>
        <member name="M:ProximityToolkit.Debug.DebugCounter.ClearAll(System.Boolean)">
            <summary>
            Stops all timers.
            </summary>
        </member>
        <member name="T:ProximityToolkit.DisplayPoint">
            <summary>
            Used to respresent a point in display coordinates.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.IntX">
            <summary>
            Gets an integer value for X.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.IntY">
            <summary>
            Gets an integer value for Y.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.FloatX">
            <summary>
            Gets a float value for X.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.FloatY">
            <summary>
            Gets a float value for Y.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.WinformsPoint">
            <summary>
            Returns a System.Drawing.Point equivalent of this coordinate.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DisplayPoint.WinformsPointF">
            <summary>
            Returns a System.Drawing.PointF equivalent of this coordinate.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Vector3Converter">
            <summary>
            Handles converting a Vector3 to a string, and back again.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Vector3">
            <summary>
            Represents a 3-tuple vector.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.EqualityTolerence">
            <summary>
            The tolerence used when determining the equality of two vectors 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.THREE_COMPONENTS">
            <summary>
            Exception message descriptive text 
            Used for a failure for an array argument to have three components when three are needed 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.NORMALIZE_0">
            <summary>
            Exception message descriptive text 
            Used for a divide by zero event caused by the normalization of a vector with magnitude 0 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.INTERPOLATION_RANGE">
            <summary>
            Exception message descriptive text 
            Used when interpolation is attempted with a control parameter not between 0 and 1 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.NON_VECTOR_COMPARISON">
            <summary>
            Exception message descriptive text 
            Used when attempting to compare a Vector3 to an object which is not a type of Vector3 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.ARGUMENT_TYPE">
            <summary>
            Exception message additional information text 
            Used when adding type information of the given argument into an error message 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.ARGUMENT_VALUE">
            <summary>
            Exception message additional information text 
            Used when adding value information of the given argument into an error message 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.ARGUMENT_LENGTH">
            <summary>
            Exception message additional information text 
            Used when adding length (number of components in an array) information of the given argument into an error message 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.NEGATIVE_MAGNITUDE">
            <summary>
            Exception message descriptive text 
            Used when attempting to set a Vectors magnitude to a negative value 
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.ORAGIN_VECTOR_MAGNITUDE">
            <summary>
            Exception message descriptive text 
            Used when attempting to set a Vectors magnitude where the Vector3 represents the origin
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.MinValue">
            <summary>
            The smallest vector possible (based on the double precision floating point structure)
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.MaxValue">
            <summary>
            The largest vector possible (based on the double precision floating point structure)
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.Epsilon">
            <summary>
            The smallest positive (non-zero) vector possible (based on the double precision floating point structure)
            </summary>
        </member>
        <member name="F:ProximityToolkit.Vector3.origin">
            <summary>
            Vector3 representing the Cartesian origin
            </summary>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="F:ProximityToolkit.Vector3.xAxis">
            <summary>
            Vector3 representing the Cartesian XAxis
            </summary>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="F:ProximityToolkit.Vector3.yAxis">
            <summary>
            Vector3 representing the Cartesian YAxis
            </summary>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="F:ProximityToolkit.Vector3.zAxis">
            <summary>
            Vector3 representing the Cartesian ZAxis
            </summary>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor for the Vector3 class accepting three doubles
            </summary>
            <param name="x">The new x value for the Vector3</param>
            <param name="y">The new y value for the Vector3</param>
            <param name="z">The new z value for the Vector3</param>
            <implementation>
            Uses the mutator properties for the Vector3 components to allow verification of input (if implemented)
            This results in the need for pre-initialisation initialisation of the Vector3 components to 0 
            Due to the necessity for struct's variables to be set in the constructor before moving control
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.#ctor(System.Double[])">
            <summary>
            Constructor for the Vector3 class from an array
            </summary>
            <param name="xyz">Array representing the new values for the Vector3</param>
            <implementation>
            Uses the VectorArray property to avoid validation code duplication 
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.#ctor(ProximityToolkit.Vector3)">
            <summary>
            Constructor for the Vector3 class from another Vector3 object
            </summary>
            <param name="v1">Vector3 representing the new values for the Vector3</param>
            <implementation>
            Copies values from Vector3 v1 to this vector, does not hold a reference to object v1 
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Addition(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Addition of two Vectors
            </summary>
            <param name="v1">Vector3 to be added to </param>
            <param name="v2">Vector3 to be added</param>
            <returns>Vector3 representing the sum of two Vectors</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Subtraction(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Subtraction of two Vectors
            </summary>
            <param name="v1">Vector3 to be subtracted from </param>
            <param name="v2">Vector3 to be subtracted</param>
            <returns>Vector3 representing the difference of two Vectors</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Multiply(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Product of a Vector3 and a scalar value
            </summary>
            <param name="v1">Vector3 to be multiplied </param>
            <param name="s2">Scalar value to be multiplied by </param>
            <returns>Vector3 representing the product of the vector and scalar</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Multiply(System.Double,ProximityToolkit.Vector3)">
            <summary>
            Product of a scalar value and a Vector3
            </summary>
            <param name="s1">Scalar value to be multiplied </param>
            <param name="v2">Vector3 to be multiplied by </param>
            <returns>Vector3 representing the product of the scalar and Vector3</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
            <Implementation>
            Using the commutative law 'scalar x vector'='vector x scalar'.
            Thus, this function calls 'operator*(Vector3 v1, double s2)'.
            This avoids repetition of code.
            </Implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Division(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Division of a Vector3 and a scalar value
            </summary>
            <param name="v1">Vector3 to be divided </param>
            <param name="s2">Scalar value to be divided by </param>
            <returns>Vector3 representing the division of the vector and scalar</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_UnaryNegation(ProximityToolkit.Vector3)">
            <summary>
            Negation of a Vector3
            Invert the direction of the Vector3
            Make Vector3 negative (-vector)
            </summary>
            <param name="v1">Vector3 to be negated  </param>
            <returns>Negated vector</returns>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_UnaryPlus(ProximityToolkit.Vector3)">
            <summary>
            Reinforcement of a Vector3
            Make Vector3 positive (+vector)
            </summary>
            <param name="v1">Vector3 to be reinforced </param>
            <returns>Reinforced vector</returns>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
            <Implementation>
            Using the rules of Addition (i.e. '+-x' = '-x' and '++x' = '+x')
            This function actually  does nothing but return the argument as given
            </Implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_LessThan(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compare the magnitude of two Vectors (less than)
            </summary>
            <param name="v1">Vector3 to be compared </param>
            <param name="v2">Vector3 to be compared with</param>
            <returns>True if v1 less than v2</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_GreaterThan(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compare the magnitude of two Vectors (greater than)
            </summary>
            <param name="v1">Vector3 to be compared </param>
            <param name="v2">Vector3 to be compared with</param>
            <returns>True if v1 greater than v2</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_LessThanOrEqual(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compare the magnitude of two Vectors (less than or equal to)
            </summary>
            <param name="v1">Vector3 to be compared </param>
            <param name="v2">Vector3 to be compared with</param>
            <returns>True if v1 less than or equal to v2</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_GreaterThanOrEqual(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compare the magnitude of two Vectors (greater than or equal to)
            </summary>
            <param name="v1">Vector3 to be compared </param>
            <param name="v2">Vector3 to be compared with</param>
            <returns>True if v1 greater than or equal to v2</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Equality(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compare two Vectors for equality.
            Are two Vectors equal.
            </summary>
            <param name="v1">Vector3 to be compared for equality </param>
            <param name="v2">Vector3 to be compared to </param>
            <returns>Boolean decision (truth for equality)</returns>
            <implementation>
            Checks the equality of each pair of components, all pairs must be equal
            A tolerence to the equality operator is applied
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.op_Inequality(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Negative comparator of two Vectors.
            Are two Vectors different.
            </summary>
            <param name="v1">Vector3 to be compared for in-equality </param>
            <param name="v2">Vector3 to be compared to </param>
            <returns>Boolean decision (truth for in-equality)</returns>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
            <implementation>
            Uses the equality operand function for two vectors to prevent code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.CrossProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Determine the cross product of two Vectors
            Determine the vector product
            Determine the normal vector (Vector3 90° to the plane)
            </summary>
            <param name="v1">The vector to multiply</param>
            <param name="v2">The vector to multiply by</param>
            <returns>Vector3 representing the cross product of the two vectors</returns>
            <implementation>
            Cross products are non commutable
            </implementation>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.CrossProduct(ProximityToolkit.Vector3)">
            <summary>
            Determine the cross product of this Vector3 and another
            Determine the vector product
            Determine the normal vector (Vector3 90° to the plane)
            </summary>
            <param name="other">The vector to multiply by</param>
            <returns>Vector3 representing the cross product of the two vectors</returns>
            <implementation>
            Uses the CrossProduct function to avoid code duplication
            <see cref="M:ProximityToolkit.Vector3.CrossProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.DotProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Determine the dot product of two Vectors
            </summary>
            <param name="v1">The vector to multiply</param>
            <param name="v2">The vector to multiply by</param>
            <returns>Scalar representing the dot product of the two vectors</returns>
            <implementation>
            </implementation>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.DotProduct(ProximityToolkit.Vector3)">
            <summary>
            Determine the dot product of this Vector3 and another
            </summary>
            <param name="other">The vector to multiply by</param>
            <returns>Scalar representing the dot product of the two vectors</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.DotProduct(ProximityToolkit.Vector3)"/>
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.MixedProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Determine the mixed product of three Vectors
            Determine volume (with sign precision) of parallelepiped spanned on given vectors
            Determine the scalar triple product of three vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <param name="v3">The third vector</param>
            <returns>Scalar representing the mixed product of the three vectors</returns>
            <implementation>
            Mixed products are non commutable
            <see cref="M:ProximityToolkit.Vector3.CrossProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            <see cref="M:ProximityToolkit.Vector3.DotProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            </implementation>
            <Acknowledgement>This code was provided by Michał Bryłka</Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.MixedProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Determine the mixed product of three Vectors
            Determine volume (with sign precision) of parallelepiped spanned on given vectors
            Determine the scalar triple product of three vectors
            </summary>
            <param name="other_v1">The second vector</param>
            <param name="other_v2">The third vector</param>
            <returns>Scalar representing the mixed product of the three vectors</returns>
            <implementation>
            Mixed products are non commutable
            <see cref="M:ProximityToolkit.Vector3.MixedProduct(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            Uses MixedProduct(Vector3, Vector3, Vector3) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Normalize(ProximityToolkit.Vector3)">
            <summary>
            Get the normalized vector
            Get the unit vector
            Scale the Vector3 so that the magnitude is 1
            </summary>
            <param name="v1">The vector to be normalized</param>
            <returns>The normalized Vector3</returns>
            <implementation>
            Uses the Magnitude function to avoid code duplication 
            </implementation>
            <exception cref="T:System.DivideByZeroException">
            Thrown when the normalisation of a zero magnitude vector is attempted
            </exception>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Normalize">
            <summary>
            Get the normalized vector
            Get the unit vector
            Scale the Vector3 so that the magnitude is 1
            </summary>
            <returns>The normalized Vector3</returns>
            <implementation>
            Uses the Magnitude and Normalize function to avoid code duplication 
            </implementation>
            <exception cref="T:System.DivideByZeroException">
            Thrown when the normalisation of a zero magnitude vector is attempted
            </exception>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Zero">
            <summary>
            Returns a zero vector.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,ProximityToolkit.Vector3,System.Double,System.Boolean)">
            <summary>
            Take an interpolated value from between two Vectors or an extrapolated value if allowed
            </summary>
            <param name="v1">The Vector3 to interpolate from (where control ==0)</param>
            <param name="v2">The Vector3 to interpolate to (where control ==1)</param>
            <param name="control">The interpolated point between the two vectors to retrieve (fraction between 0 and 1), or an extrapolated point if allowed</param>
            <param name="allowExtrapolation">True if the control may represent a point not on the vertex between v1 and v2</param>
            <returns>The value at an arbitrary distance (interpolation) between two vectors or an extrapolated point on the extended virtex</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the control is not between values of 0 and 1 and extrapolation is not allowed
            </exception>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,ProximityToolkit.Vector3,System.Double)">
            <summary>
            Take an interpolated value from between two Vectors
            </summary>
            <param name="v1">The Vector3 to interpolate from (where control ==0)</param>
            <param name="v2">The Vector3 to interpolate to (where control ==1)</param>
            <param name="control">The interpolated point between the two vectors to retrieve (fraction between 0 and 1)</param>
            <returns>The value at an arbitrary distance (interpolation) between two vectors</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,ProximityToolkit.Vector3,System.Double,System.Boolean)"/>
            Uses the Interpolate(Vector3,Vector3,double,bool) method to avoid code duplication
            </implementation>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the control is not between values of 0 and 1
            </exception>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Take an interpolated value from between two Vectors
            </summary>
            <param name="other">The Vector3 to interpolate to (where control ==1)</param>
            <param name="control">The interpolated point between the two vectors to retrieve (fraction between 0 and 1)</param>
            <returns>The value at an arbitrary distance (interpolation) between two vectors</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,ProximityToolkit.Vector3,System.Double)"/>
            Overload for Interpolate method, finds an interpolated value between this Vector3 and another
            Uses the Interpolate(Vector3,Vector3,double) method to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,System.Double,System.Boolean)">
            <summary>
            Take an interpolated value from between two Vectors or an extrapolated value if allowed
            </summary>
            <param name="other">The Vector3 to interpolate to (where control ==1)</param>
            <param name="control">The interpolated point between the two vectors to retrieve (fraction between 0 and 1), or an extrapolated point if allowed</param>
            <param name="allowExtrapolation">True if the control may represent a point not on the vertex between v1 and v2</param>
            <returns>The value at an arbitrary distance (interpolation) between two vectors or an extrapolated point on the extended virtex</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Interpolate(ProximityToolkit.Vector3,ProximityToolkit.Vector3,System.Double,System.Boolean)"/>
            Uses the Interpolate(Vector3,Vector3,double,bool) method to avoid code duplication
            </implementation>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the control is not between values of 0 and 1 and extrapolation is not allowed
            </exception>
        </member>
        <member name="M:ProximityToolkit.Vector3.Distance(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Find the distance between two Vectors
            Pythagoras theorem on two Vectors
            </summary>
            <param name="v1">The Vector3 to find the distance from </param>
            <param name="v2">The Vector3 to find the distance to </param>
            <returns>The distance between two Vectors</returns>
            <implementation>
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Distance(ProximityToolkit.Vector3)">
            <summary>
            Find the distance between two Vectors
            Pythagoras theorem on two Vectors
            </summary>
            <param name="other">The Vector3 to find the distance to </param>
            <returns>The distance between two Vectors</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Distance(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            Overload for Distance method, finds distance between this Vector3 and another
            Uses the Distance(Vector3,Vector3) method to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.AnglePS(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Finds the positive symmetric angle (0° to 180°) between two vectors in either direction.
            </summary>
            <param name="v1">The vector to discern the angle from.</param>
            <param name="v2">The vector to discern the angle to.</param>
            <returns>The angle between the two vectors.</returns>
            <implementation>
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.AngleP(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Finds the positive angle (0° to 360°) between two vectors about a normal axis.
            </summary>
            <param name="v1">The vector to discern the angle from.</param>
            <param name="v2">The vector to discern the angle to.</param>
            <param name="axis">The normal axis about which the angle occurs.</param>
            <returns>The angle between the two vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.AngleS(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Finds the symmetric angle (-180° to 180°) between two vectors about a normal axis.
            </summary>
            <param name="v1">The vector to discern the angle from.</param>
            <param name="v2">The vector to discern the angle to.</param>
            <param name="axis">The normal axis about which the angle occurs.</param>
            <returns>The angle between the two vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.AnglePS(ProximityToolkit.Vector3)">
            <summary>
            Find the positive symmetric angle (0° to 180°) between this and another vector in either direction.
            </summary>
            <param name="other">The vector to discern the angle to.</param>
            <returns>The positive symmetric angle between two vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.AngleP(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Find the positive angle (0° to 360°) between this and another vector about a normal axis.
            </summary>
            <param name="other">The vector to discern the angle to.</param>
            <param name="axis">The normal axis about which the angle occurs.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.AngleS(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Find the symmetric angle (-180° to 180°) between this and another vector about a normal axis.
            </summary>
            <param name="other">The vector to discern the angle to.</param>
            <param name="axis">The normal axis about which the angle occurs.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Max(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compares the magnitude of two vectors and returns the greater.
            </summary>
            <param name="v1">The vector to compare</param>
            <param name="v2">The vector to compare with</param>
            <returns>
            The greater of the two Vectors (based on magnitude)
            </returns>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Max(ProximityToolkit.Vector3)">
            <summary>
            Compares the magnitude of this and another vector and returns the greater.
            </summary>
            <param name="other">The vector to compare with</param>
            <returns>
            The greater of the two Vectors (based on magnitude)
            </returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Max(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            Uses function Max(Vector3, Vector3) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Min(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Compares the magnitude of two vectors and returns the lesser.
            </summary>
            <param name="v1">The vector to compare</param>
            <param name="v2">The vector to compare with</param>
            <returns>
            The lesser of the two Vectors (based on magnitude)
            </returns>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Min(ProximityToolkit.Vector3)">
            <summary>
            Compares the magnitude of this and another vector and returns the lesser.
            </summary>
            <param name="other">The vector to compare with</param>
            <returns>
            The lesser of the two Vectors (based on magnitude)
            </returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Min(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/>
            Uses function Min(Vector3, Vector3) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Yaw(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Rotates a vector around the Y axis.
            Change the yaw of a Vector3
            </summary>
            <param name="v1">The Vector3 to be rotated</param>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the Y axis</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Yaw(System.Double)">
            <summary>
            Rotates this vector around the Y axis.
            Change the yaw of the Vector3
            </summary>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the Y axis</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Yaw(ProximityToolkit.Vector3,System.Double)"/>
            Uses function Yaw(Vector3, double) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Pitch(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Rotates a vector around the X axis.
            Change the pitch of a Vector3
            </summary>
            <param name="v1">The Vector3 to be rotated</param>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the X axis</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Pitch(System.Double)">
            <summary>
            Rotates this vector around the X axis.
            Change the pitch of a Vector3
            </summary>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the X axis</returns>
            <see cref="M:ProximityToolkit.Vector3.Pitch(ProximityToolkit.Vector3,System.Double)"/>
            <implementation>
            Uses function Pitch(Vector3, double) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Roll(ProximityToolkit.Vector3,System.Double)">
            <summary>
            Rotates a vector around the Z axis.
            Change the roll of a Vector3
            </summary>
            <param name="v1">The Vector3 to be rotated</param>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the Z axis</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Roll(System.Double)">
            <summary>
            Rotates this vector around the Z axis.
            Change the roll of a Vector3
            </summary>
            <param name="degree">The angle to rotate the Vector3 around in degrees</param>
            <returns>Vector3 representing the rotation around the Z axis</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.Roll(ProximityToolkit.Vector3,System.Double)"/>
            Uses function Roll(Vector3, double) to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Abs(ProximityToolkit.Vector3)">
            <summary>
            Finds the absolute value of a vector.
            Find the magnitude of a Vector3
            </summary>
            <returns>A Vector3 representing the absolute values of the vector</returns>
            <implementation>
            An alternative interface to the magnitude property
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Abs">
            <summary>
            Find the absolute value of this vector.
            Find the magnitude of a Vector3
            </summary>
            <returns>A Vector3 representing the absolute values of the vector</returns>
            <implementation>
            An alternative interface to the magnitude property
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.MidPoint(ProximityToolkit.Vector3)">
            <summary>
            Finds the mid point between this and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The mid point between vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.MidPoint(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Finds the mid point between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The mid point between vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.ToMatrix">
            <summary>
            Converts this vector to a columnar matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Rounded(System.Int32)">
            <summary>
            Rounds the components of th evector to a certain decimal place.
            </summary>
            <param name="decimalplaces"></param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Round(System.Int32)">
            <summary>
            Rounds the components of this vector to a certain decimal place.
            </summary>
            <param name="decimalplaces"></param>
        </member>
        <member name="M:ProximityToolkit.Vector3.GetMasked(ProximityToolkit.Vector3)">
            <summary>
            Gets this vector with components overwritten by zero values from the mask.
            </summary>
            <param name="mask">The mask.</param>
            <returns>The masked vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.GetSignMasked(ProximityToolkit.Vector3)">
            <summary>
            Gets this vector with components affected by the sign of the mask, and zero values overwritten.
            </summary>
            <param name="mask">The mask.</param>
            <returns>The masked vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.GetInclineAzimuthRoll(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Angle@,ProximityToolkit.Angle@,ProximityToolkit.Angle@)">
            <summary>
            Gets the Incline/Azimuth/Roll relative to a world basis.
            </summary>
            <param name="worldfront">The world forward direction, or primary horizontal axis.</param>
            <param name="worldup">The world up direction, or positive vertical axis.</param>
            <param name="worldlong">A lateral world vector, purpendicular to both world front and world up.</param>
            <param name="front">The front vector of an object.</param>
            <param name="up">The up vector of an object.</param>
            <param name="incline">The calculated incline.</param>
            <param name="azimuth">The calculated azimuth.</param>
            <param name="roll">The calculated roll.</param>
        </member>
        <member name="M:ProximityToolkit.Vector3.SumComponents(ProximityToolkit.Vector3)">
            <summary>
            The sum of a vector's components.
            </summary>
            <param name="v1">The vector whose scalar components to sum.</param>
            <returns>The sum of the Vectors X, Y and Z components.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.SumComponents">
            <summary>
            The sum of this vector's components.
            </summary>
            <returns>The sum of the Vectors X, Y and Z components.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.SumComponents(ProximityToolkit.Vector3)"/>
            The Components.SumComponents(Vector3) function has been used to prevent code duplication.
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.SumComponentSqrs(ProximityToolkit.Vector3)">
            <summary>
            The sum of a vector's squared components.
            </summary>
            <param name="v1">The vector whose scalar components to square and sum.</param>
            <returns>The sum of the Vectors X^2, Y^2 and Z^2 components.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.SumComponentSqrs">
            <summary>
            The sum of this vector's squared components
            </summary>
            <returns>The sum of the Vectors X^2, Y^2 and Z^2 components</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.SumComponentSqrs(ProximityToolkit.Vector3)"/>
            The Components.SumComponentSqrs(Vector3) function has been used to prevent code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.PowComponents(ProximityToolkit.Vector3,System.Double)">
            <summary>
            The individual multiplication to a power of a vector's components.
            </summary>
            <param name="v1">The vector whose scalar components to multiply by a power.</param>
            <param name="power">The power by which to multiply the components.</param>
            <returns>The multiplied Vector3.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.PowComponents(System.Double)">
            <summary>
            The individual multiplication to a power of this vector's components.
            </summary>
            <param name="power">The power by which to multiply the components.</param>
            <returns>The multiplied Vector3.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.PowComponents(ProximityToolkit.Vector3,System.Double)"/>
            The Components.PowComponents(Vector3, double) function has been used to prevent code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.SqrtComponents(ProximityToolkit.Vector3)">
            <summary>
            The individual square root of a vector's components.
            </summary>
            <param name="v1">The vector whose scalar components to square root</param>
            <returns>The rooted Vector3.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.SqrtComponents">
            <summary>
            The individual square root of this vector's components.
            </summary>
            <returns>The rooted Vector3.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.SqrtComponents(ProximityToolkit.Vector3)"/>
            The Components.SqrtComponents(Vector3) function has been used to prevent code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.SqrComponents(ProximityToolkit.Vector3)">
            <summary>
            The vector's components squared.
            </summary>
            <param name="v1">The vector whose scalar components are to square.</param>
            <returns>The squared Vector3.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.SqrComponents">
            <summary>
            This vector's components squared.
            </summary>
            <returns>The squared Vector3.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.SqrtComponents(ProximityToolkit.Vector3)"/>
            The Components.SqrComponents(Vector3) function has been used to prevent code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.ToString">
            <summary>
            Textual description of the vector.
            </summary>
            <Implementation>
            Uses ToString(string, IFormatProvider) to avoid code duplication
            </Implementation>
            <returns>Text (String) representing the vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.ToLabelledString">
            <summary>
            Textual description of the vector, with component labels.
            </summary>
            <returns>Text (String) representing the vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.TryParse(System.String,ProximityToolkit.Vector3@)">
            <summary>
            Attempts to parse vector data from a string.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="value">The resulting Vector3 value.</param>
            <returns>True if parsing succeeded, false if not.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.Parse(System.String)">
            <summary>
            Parses vector data from a string.  Throws a FormatException on failure.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The resulting Vector3 value.</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Textual description of the vector.
            </summary>
            <param name="format">Formatting string: 'x','y','z' or '' followed by standard numeric format string characters valid for a double precision floating point</param>
            <param name="formatProvider">The culture specific fromatting provider</param>
            <returns>Text (String) representing the vector</returns>
        </member>
        <member name="M:ProximityToolkit.Vector3.GetHashCode">
            <summary>
            Get the hashcode.
            </summary>
            <returns>Hashcode for the object instance</returns>
            <implementation>
            Required in order to implement comparator operations (i.e. ==, !=)
            </implementation>
            <Acknowledgement>This code is adapted from CSOpenGL - Lucas Viñas Livschitz </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.Equals(System.Object)">
            <summary>
            Comparator
            </summary>
            <param name="other">The other object (which should be a vector) to compare to</param>
            <returns>Truth if two vectors are equal within a tolerence</returns>
            <implementation>
            Checks if the object argument is a Vector3 object 
            Uses the equality operator function to avoid code duplication
            Required in order to implement comparator operations (i.e. ==, !=)
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.Equals(ProximityToolkit.Vector3)">
            <summary>
            Comparator
            </summary>
            <param name="other">The other Vector3 to compare to</param>
            <returns>Truth if two vectors are equal within a tolerence</returns>
            <implementation>
            Uses the equality operator function to avoid code duplication
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.CompareTo(ProximityToolkit.Vector3)">
            <summary>
            Compares the magnitude of this instance against the magnitude of the supplied vector.
            </summary>
            <param name="other">The vector to compare this instance with</param>
            <returns>
            -1: The magnitude of this instance is less than the others magnitude
            0: The magnitude of this instance equals the magnitude of the other
            1: The magnitude of this instance is greater than the magnitude of the other
            </returns>
            <implementation>
            Implemented to fulfil the IComparable interface
            </implementation>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.CompareTo(System.Object)">
            <summary>
            Compares the magnitude of this instance against the magnitude of the supplied vector.
            </summary>
            <param name="other">The vector to compare this instance with</param>
            <returns>
            -1: The magnitude of this instance is less than the others magnitude
            0: The magnitude of this instance equals the magnitude of the other
            1: The magnitude of this instance is greater than the magnitude of the other
            </returns>
            <implementation>
            Implemented to fulfil the IComparable interface
            </implementation>
            <exception cref="T:System.ArgumentException">
            Throws an exception if the type of object to be compared is not known to this class
            </exception>
            <Acknowledgement>This code is adapted from Exocortex - Ben Houston </Acknowledgement>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsUnitVector(ProximityToolkit.Vector3)">
            <summary>
            Checks if a vector a unit vector.
            Checks if the Vector3 has been normalized.
            Checks if a vector has a magnitude of 1.
            </summary>
            <param name="v1">
            The vector to be checked for Normalization.
            </param>
            <returns>True if the vector is a unit vector.</returns>
            <implementation>
            <see cref="P:ProximityToolkit.Vector3.Magnitude"/>	
            Uses the Magnitude property in the check to avoid code duplication
            Within a tolerence
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsUnitVector">
            <summary>
            Checks if this vector is a unit vector.
            Checks if the Vector3 has been normalized.
            Checks if the vector has a magnitude of 1.
            </summary>
            <returns>True if this vector is a unit vector.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.IsUnitVector(ProximityToolkit.Vector3)"/>	
            Uses the isUnitVector(Vector3) property in the check to avoid code duplication
            Within a tolerence
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsBackFace(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Checks if a face normal vector represents back face.
            Checks if a face is visible, given the line of sight.
            </summary>
            <param name="normal">
            The vector representing the face normal Vector3.
            </param>
            <param name="lineOfSight">
            The unit vector representing the direction of sight from a virtual camera.
            </param>
            <returns>True if the vector (as a normal) represents a back face.</returns>
            <implementation>
            Uses the DotProduct function in the check to avoid code duplication.
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsBackFace(ProximityToolkit.Vector3)">
            <summary>
            Checks if this face normal vector represents back face.
            Checks if this face is visible, given the line of sight.
            </summary>
            <param name="lineOfSight">
            The unit vector representing the direction of sight from a virtual camera.
            </param>
            <returns>Truth if the vector (as a normal) represents a back face.</returns>
            <implementation>
            <see cref="M:ProximityToolkit.Vector3.IsBackFace(ProximityToolkit.Vector3,ProximityToolkit.Vector3)"/> 
            Uses the isBackFace(Vector3, Vector3) function in the check to avoid code duplication.
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsPerpendicular(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Checks if two vectors are perpendicular.
            Checks if two Vectors are orthogonal.
            Checks if one Vector3 is the normal of the other.
            </summary>
            <param name="v1">
            The vector to be checked for orthogonality.
            </param>
            <param name="v2">
            The vector to be checked for orthogonality to.
            </param>
            <returns>Truth if the two Vectors are perpendicular.</returns>
            <implementation>
            Uses the DotProduct function in the check to avoid code duplication.
            </implementation>
        </member>
        <member name="M:ProximityToolkit.Vector3.IsPerpendicular(ProximityToolkit.Vector3)">
            <summary>
            Checks if this vector is perpendicular to another.
            Checks if two Vectors are orthogonal.
            Checks if one Vector3 is the Normal of the other.
            </summary>
            <param name="other">
            The vector to be checked for orthogonality.
            </param>
            <returns>Truth if the two Vectors are perpendicular.</returns>
            <implementation>
            Uses the isPerpendicualr(Vector3, Vector3) function in the check to avoid code duplication.
            </implementation>
        </member>
        <member name="P:ProximityToolkit.Vector3.X">
            <summary>
            Property for the x component of the Vector3
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.Y">
            <summary>
            Property for the y component of the Vector3
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.Z">
            <summary>
            Property for the z component of the Vector3
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.Magnitude">
            <summary>
            Property for the magnitude (aka. length or absolute value) of the Vector3
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.Array">
            <summary>
            Property for the Vector3 as an array
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if the array argument does not contain exactly three components 
            </exception> 
        </member>
        <member name="P:ProximityToolkit.Vector3.Item(System.Int32)">
            <summary>
            An index accessor 
            Mapping index [0] -&gt; X, [1] -&gt; Y and [2] -&gt; Z.
            </summary>
            <param name="index">The array index referring to a component within the vector (i.e. x, y, z)</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the array argument does not contain exactly three components 
            </exception>
        </member>
        <member name="P:ProximityToolkit.Vector3.Normalized">
            <summary>
            The normalized equivalent of this vector.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.Inverse">
            <summary>
            The inverse of this vector, taken by inversing each of its components such that Inverse = (1/X, 1/Y, 1/Z).
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.FlattenedXY">
            <summary>
            The vector with Z component flattened to 0.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.FlattenedXZ">
            <summary>
            The vector with Y component flattened to 0.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.FlattenedYZ">
            <summary>
            The vector with X component flattened to 0.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Vector3.ComponentSum">
            <summary>
            The vector with X component flattened to 0.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Collision.Point">
            <summary>
            Collision class representing a point.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Collision.Point.#ctor(ProximityToolkit.ITransformNode,ProximityToolkit.Vector3)">
            <summary>
            Renders the collidible volume.
            </summary>
            <param name="r">The renderring object.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Point.Set(ProximityToolkit.Vector3)">
            <summary>
            Sets the geometry data.
            </summary>
            <param name="newlocation">The new location.</param>
        </member>
        <member name="M:ProximityToolkit.Collision.Point.Clone">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:ProximityToolkit.Collision.Point.Clone(ProximityToolkit.Matrix)">
            <summary>
            Clones the collision object.
            </summary>
            <returns>A clone of this ICollidible object.</returns>
        </member>
        <member name="P:ProximityToolkit.Collision.Point.Location">
            <summary>
            Gets the location of this point.
            </summary>
        </member>
        <member name="T:ProximityToolkit.HistoryProperty`1">
            <summary>
            Maintains a history queue of type T.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:ProximityToolkit.HistoryProperty`1.FlushExpired">
            <summary>
            Removes and disposes of entries that exceed the history depth.
            </summary>
        </member>
        <member name="P:ProximityToolkit.HistoryProperty`1.Value">
            <summary>
            Gets or sets the current property value.
            </summary>
        </member>
        <member name="P:ProximityToolkit.HistoryProperty`1.Item(System.Int32)">
            <summary>
            Gets the property value at a given history index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:ProximityToolkit.HistoryProperty`1.Depth">
            <summary>
            Gets and sets the desired history depth.  If the current history list is longer than the new depth, the oldest values are thrown out.
            </summary>
        </member>
        <member name="P:ProximityToolkit.HistoryProperty`1.Count">
            <summary>
            Gets the number of history entries stored in this structure.
            </summary>
        </member>
        <member name="T:ProximityToolkit.DataSet`1">
            <summary>
            Storage class that provides an ordered dictionary.
            </summary>
            <typeparam name="T">The datatype to store in this DataSet.</typeparam>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.AddItem(System.String,`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="key">The key for this item.</param>
            <param name="newitem">The item to add.</param>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.RemoveItem(System.String)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.IndexOf(`0)">
            <summary>
            Gets the index of a given item.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>The index of the item.  Returns -1 if the item is not in the collection.</returns>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.ContainsKey(System.String)">
            <summary>
            Gets true if the specified key exists in the collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Whether the key exists.</returns>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.GetList">
            <summary>
            Returns the collection in List representation.
            </summary>
            <returns>A List of items.</returns>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating through this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ProximityToolkit.DataSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Defines the default enumerator for this class.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:ProximityToolkit.DataSet`1.Item(System.String)">
            <summary>
            Gets the item at the given key.
            </summary>
            <param name="key">The key of the item to retrieve.</param>
            <returns>The retrieved item.</returns>
        </member>
        <member name="P:ProximityToolkit.DataSet`1.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">The index to retrieve.</param>
            <returns>The retrieved item.</returns>
        </member>
        <member name="P:ProximityToolkit.DataSet`1.Count">
            <summary>
            Gets the number of items contained in this collection.
            </summary>
        </member>
        <member name="T:ProximityToolkit.DoubleHistoryProperty">
            <summary>
            Maintains a history queue of doubles.
            </summary>
        </member>
        <member name="M:ProximityToolkit.DoubleHistoryProperty.SetSmoothFilter(System.Double[])">
            <summary>
            An array of weights used to calculate history smoothing.
            </summary>
            <param name="filtervector"></param>
        </member>
        <member name="P:ProximityToolkit.DoubleHistoryProperty.Value">
            <summary>
            Gets or sets the current property value.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DoubleHistoryProperty.Smooth">
            <summary>
            Gets and sets whether the current value is smoothed or raw.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DoubleHistoryProperty.Depth">
            <summary>
            Gets and sets the desired history depth.  If the current history list is longer than the new depth, the oldest values are thrown out.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DoubleHistoryProperty.Count">
            <summary>
            Gets the number of history entries stored in this structure.
            </summary>
        </member>
        <member name="P:ProximityToolkit.DoubleHistoryProperty.Item(System.Int32)">
            <summary>
            Gets the property value at a given history index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:ProximityToolkit.Presence.LocationDecorator">
            <summary>
            Decorator to represent the location of a presence.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.LocationDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,ProximityToolkit.Vector3)">
            <summary>
            Updates the location data for this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="newlocation">The updated location data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.LocationDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Updates the motion data for this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="newveloc">The updated velocity data.</param>
            <param name="newaccel">The updated acceleration data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.LocationDecorator.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle a changed smoothing filter.
            </summary>
            <param name="filter">The new filter.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.LocationDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.LocationDecorator.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to handle transforming data to the correct coordinate system.
            </summary>
            <param name="trans">The transformation to the new coordinate system.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.Location">
            <summary>
            Gets or sets the location point representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.LocationHistory">
            <summary>
            Gets the recent history of location values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.Velocity">
            <summary>
            Gets or sets the velocity vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.VelocityHistory">
            <summary>
            Gets the recent history of velocity values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.Acceleration">
            <summary>
            Gets or sets the acceleration vector representative of the presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.LocationDecorator.AccelerationHistory">
            <summary>
            Gets the recent history of acceleration values.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Matrix">
            <summary>
            A simple override of the MathNet Matrix class so that programs utilizing the Proximity Toolkit do not need to include the
            additional reference in order to use Matrix functionality.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Matrix.Add(ProximityToolkit.Matrix)">
            <summary>
            Adds two matrices together.
            </summary>
            <param name="m">The second matrix in the operation.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.ArrayDivide(ProximityToolkit.Matrix)">
            <summary>
            Performs division of two matrices.
            </summary>
            <param name="m">The second matrix in the operation.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.ArrayMultiply(ProximityToolkit.Matrix)">
            <summary>
            Performs multiplication of two matrices.
            </summary>
            <param name="m">The second matrix in the operation.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.Clone">
            <summary>
            Makes an exact copy of this matrix as a new object.
            </summary>
            <returns>The clone of the matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Invert">
            <summary>
            Inverts the current matrix.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Matrix.Multiply(System.Double)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="s">The scalar value to multiply.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.Rank">
            <summary>
            Calculates the Rank of the matrix.
            </summary>
            <returns>The Rank of the matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Subtract(ProximityToolkit.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="m">The matrix to subtract.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Matrix.UnaryMinus">
            <summary>
            Performs a Unary Minus operation on this matrix.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToVector3">
            <summary>
            Converts a columnar matrix to a vector.
            </summary>
            <returns>The Vector3 equivalent of the matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToArray">
            <summary>
            Converts the matrix to a single-dimensional array of doubles.
            </summary>
            <returns>An array of doubles containing the matrix values.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(ProximityToolkit.Vector3)">
            <summary>
            Applies the transformation represented by this matrix to a vector.
            </summary>
            <param name="vec">The vector to transform.</param>
            <returns>A transformed vector</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(ProximityToolkit.Vector3[])">
            <summary>
            Applies the transformation represented by this matrix to an array of vectors.
            </summary>
            <param name="vecs">The array of vectors to transform.</param>
            <returns>A transformed array of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(System.Collections.Generic.List{ProximityToolkit.Vector3})">
            <summary>
            Applies the transformation represented by this matrix to a list of vectors.
            </summary>
            <param name="vecs">The list of vectors to transform.</param>
            <returns>A transformed list of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(System.Collections.Generic.List{ProximityToolkit.Vector3},System.Boolean,System.Boolean)">
            <summary>
            Applies optionally the rotation and translation represented by this matrix to a list of vectors.
            </summary>
            <param name="vecs">The list of vectors to transform.</param>
            <param name="rotation">Whether or not to apply rotation.</param>
            <param name="translation">Whether or not to apply translation.</param>
            <returns>A transformed list of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(ProximityToolkit.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Applies optionally the rotation and translation represented by this matrix to a vector.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="rotation">Whether or not to apply rotation.</param>
            <param name="translation">Whether or not to apply translation.</param>
            <returns>A transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Apply(ProximityToolkit.Vector3[],System.Boolean,System.Boolean)">
            <summary>
            Applies optionally the rotation and translation represented by this matrix to an array of vectors.
            </summary>
            <param name="vecs">The array of vectors to transform.</param>
            <param name="rotation">Whether or not to apply rotation.</param>
            <param name="translation">Whether or not to apply translation.</param>
            <returns>A transformed array of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToSpace(ProximityToolkit.Matrix,ProximityToolkit.Vector3)">
            <summary>
            Transforms the specified vector from the space represented by this matrix, to the specified space.
            </summary>
            <param name="dest">The destination space.</param>
            <param name="vec">The vector to transform.</param>
            <returns>A transformed vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToSpace(ProximityToolkit.Matrix,ProximityToolkit.Vector3[])">
            <summary>
            Transforms the specified array of vectors from the space represented by this matrix, to the specified space.
            </summary>
            <param name="dest">The destination space.</param>
            <param name="vec">The array of vectors to transform.</param>
            <returns>A transformed array of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToSpace(ProximityToolkit.Matrix,System.Collections.Generic.List{ProximityToolkit.Vector3})">
            <summary>
            Transforms the specified list of vectors from the space represented by this matrix, to the specified space.
            </summary>
            <param name="dest">The destination space.</param>
            <param name="vec">The list of vectors to transform.</param>
            <returns>A transformed list of vectors.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToString">
            <summary>
            Outputs a string representation of this matrix.
            </summary>
            <returns>A string representation of this matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.ToDelimString(ProximityToolkit.Matrix,System.Char,System.Char)">
            <summary>
            Outputs this matrix as a delimited string.
            </summary>
            <param name="m">The matrix to output.</param>
            <param name="coldelim">The delimeter used to separate columns.</param>
            <param name="rowdelim">The delimeter used to separate rows.</param>
            <returns>A delimited string that represents this matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.FromDelimString(System.String,System.Char,System.Char)">
            <summary>
            Parses this matrix from a delimited string.
            </summary>
            <param name="m">The matrix to parse.</param>
            <param name="coldelim">The expected delimeter used to separate columns.</param>
            <param name="rowdelim">The expected delimeter used to separate rows.</param>
            <returns>A matrix parsed from the given string.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Identity(System.Int32)">
            <summary>
            Returns an m x m identity matrix.
            </summary>
            <param name="m">The number of columns/rows of the identity matrix.</param>
            <returns>An m x m identity matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Basis(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Gets a transformation matrix representing a space based on 3 basis vectors.
            </summary>
            <param name="xaxis">The x-basis.</param>
            <param name="yaxis">The y-basis.</param>
            <param name="zaxis">The z-basis.</param>
            <returns>A transformation matrix representing the space.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Basis(ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Gets a transformation matrix representing a space based on 3 basis vectors and a translation vector.
            </summary>
            <param name="xaxis">The x-basis.</param>
            <param name="yaxis">The y-basis.</param>
            <param name="zaxis">The z-basis.</param>
            <param name="trans">The translation vector.</param>
            <returns>A transformation matrix representing the space.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetXAxis(ProximityToolkit.Matrix)">
            <summary>
            Gets the X-Axis of the transformation represented by a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>The X-Axis.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetYAxis(ProximityToolkit.Matrix)">
            <summary>
            Gets the Y-Axis of the transformation represented by a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>The Y-Axis.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetZAxis(ProximityToolkit.Matrix)">
            <summary>
            Gets the Z-Axis of the transformation represented by a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>The Z-Axis.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.AxisRotation(ProximityToolkit.Angle,System.Double,System.Double,System.Double)">
            <summary>
            Gets a matrix transformation representing the rotation of a given angle about a given axis.
            </summary>
            <param name="angle">The angle of the rotation.</param>
            <param name="x">The x-component of the axis.</param>
            <param name="y">The y-component of the axis.</param>
            <param name="z">The z-component of the axis.</param>
            <returns>A matrix transformation representing the rotation.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.AxisRotation(ProximityToolkit.Angle,ProximityToolkit.Vector3)">
            <summary>
            Gets a matrix transformation representing the rotation of a given angle about a given axis.
            </summary>
            <param name="angle">The angle of the rotation.</param>
            <param name="axis">The axis of the rotation.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetTranslation(ProximityToolkit.Matrix)">
            <summary>
            Gets the translation component of the given matrix as a vector.
            </summary>
            <param name="m">The matrix to extract the translation from.</param>
            <returns>The translation as a vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.SetTranslation(ProximityToolkit.Matrix,ProximityToolkit.Vector3)">
            <summary>
            Sets the translation component of the given matrix from a vector.
            </summary>
            <param name="m">The matrix to apply the translation to.</param>
            <param name="t">The transform vector to apply.</param>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetRotationAxis(ProximityToolkit.Matrix,ProximityToolkit.Angle)">
            <summary>
            Finds the Rotation Axis based on a matrix and a known angle.
            </summary>
            <param name="m">The matrix.</param>
            <param name="angle">The known angle.</param>
            <returns>The Rotation Axis unit vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetRotationAngle(ProximityToolkit.Matrix,ProximityToolkit.Vector3)">
            <summary>
            Finds the Rotation Angle based on a matrix and a known axis.
            </summary>
            <param name="m">The matrix.</param>
            <param name="axis">The known axis.</param>
            <returns>The Rotation Angle.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Gets a translation matrix.
            </summary>
            <param name="x">The x-component of the tranlation.</param>
            <param name="y">The y-component of the tranlation.</param>
            <param name="z">The z-component of the tranlation.</param>
            <returns></returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Translation(ProximityToolkit.Vector3)">
            <summary>
            Gets a translation matrix from a vector.
            </summary>
            <param name="v">The tranlation as a vector.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Gets a scale matrix.
            </summary>
            <param name="x">The x-component of the scale.</param>
            <param name="y">The y-component of the scale.</param>
            <param name="z">The z-component of the scale.</param>
            <returns>A scale matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.Scale(ProximityToolkit.Vector3)">
            <summary>
            Gets a scale matrix from a vector.
            </summary>
            <param name="v">The scale as a vector.</param>
            <returns>A scaled matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.GetScale(ProximityToolkit.Matrix)">
            <summary>
            Gets the scale factor of each axis as a vector.
            </summary>
            <param name="m">The matrix from which to extract the scale vector.</param>
            <returns>The scale vector.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.RotateX(ProximityToolkit.Angle)">
            <summary>
            Gets a matrix that represents a rotation about the X axis.
            </summary>
            <param name="angle">Angle in degrees to rotate about X axis.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.RotateY(ProximityToolkit.Angle)">
            <summary>
            Gets a matrix that represents a rotation about the Y axis.
            </summary>
            <param name="angle">Angle in degrees to rotate about Y axis.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.RotateZ(ProximityToolkit.Angle)">
            <summary>
            Gets a matrix that represents a rotation about the Z axis.
            </summary>
            <param name="angle">Angle in degrees to rotate about Z axis.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:ProximityToolkit.Matrix.RemoveTranslation(ProximityToolkit.Matrix)">
            <summary>
            Strips any translation values from a matrix.
            </summary>
            <param name="M">The matrix to be stripped.</param>
            <returns>The stripped matrix.</returns>
        </member>
        <member name="P:ProximityToolkit.Matrix.ColumnCount">
            <summary>
            Returns the number of columns in this matrix.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.Inverse">
            <summary>
            Returns an inverted clone of this matrix.
            </summary>
            <returns>An inverted clone of this matrix.</returns>
        </member>
        <member name="P:ProximityToolkit.Matrix.RowCount">
            <summary>
            Returns the number of rows in this matrix.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.Transposed">
            <summary>
            Returns a transposed clone of this matrix.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.UnaryMinused">
            <summary>
            Returns a Unary-Minused clone of this matrix.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of a single entry in the matrix.
            </summary>
            <param name="i">The column of the desired entry.</param>
            <param name="j">The row of the desired entry.</param>
            <returns>The value of the desired entry.</returns>
        </member>
        <member name="P:ProximityToolkit.Matrix.RotationMatrix">
            <summary>
            Gets only the portion of this matrix representing rotation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.TranslationMatrix">
            <summary>
            Gets only the portion of this matrix representing translation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Matrix.XAxis">
            <summary>
            Gets the X-Axis of the transformation represented by this matrix.
            </summary>
            <returns>The X-Axis.</returns>
        </member>
        <member name="P:ProximityToolkit.Matrix.YAxis">
            <summary>
            Gets the Y-Axis of the transformation represented by this matrix.
            </summary>
            <returns>The Y-Axis.</returns>
        </member>
        <member name="P:ProximityToolkit.Matrix.ZAxis">
            <summary>
            Gets the Z-Axis of the transformation represented by this matrix.
            </summary>
            <returns>The Z-Axis.</returns>
        </member>
        <member name="T:ProximityToolkit.Presence.RotationDecorator">
            <summary>
            Decorator to represent the rotation of a presence.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.RotationDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,ProximityToolkit.Vector3,ProximityToolkit.Angle)">
            <summary>
            Updates the rotation data for this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="newaxis">The updated axis data.</param>
            <param name="newangle">The updated angle data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.RotationDecorator.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle a changed smoothing filter.
            </summary>
            <param name="filter">The new filter.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.RotationDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.RotationDecorator.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to handle transforming data to the correct coordinate system.
            </summary>
            <param name="trans">The transformation to the new coordinate system.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.RotationDecorator.Axis">
            <summary>
            Gets or sets the axis of rotation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.RotationDecorator.AxisHistory">
            <summary>
            Gets the recent history of rotation axes.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.RotationDecorator.Angle">
            <summary>
            Gets or sets the angle of rotation.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.RotationDecorator.AngleHistory">
            <summary>
            Gets the recent history of rotation angles.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.PresencePointer">
            <summary>
            Represents a pointer emitted from a presence.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.Set(ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Sets the geometric properties of the pointer.
            </summary>
            <param name="location">The new location.</param>
            <param name="direction">The new direction.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.Update(System.Single,System.Boolean,System.Boolean,ProximityToolkit.Vector3,ProximityToolkit.Vector3)">
            <summary>
            Updates the pointer data.
            </summary>
            <param name="confidence">The data confidence value.</param>
            <param name="visible">Whether the pointer is visible.</param>
            <param name="absolute">Whether the data is absolute or relative.</param>
            <param name="newlocation">The new location data.</param>
            <param name="newdirection">The new direction data.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.MergeUpdate(ProximityToolkit.Presence.IPointer,ProximityToolkit.Matrix)">
            <summary>
            Updates the pointer data from another pointer.
            </summary>
            <param name="p">The pointer to use for updates.</param>
            <param name="transform">The transformation to apply to the new data.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.CollidesWith(ProximityToolkit.Collision.ICollidible)">
            <summary>
            Gets the collision details between this and another collidible object.
            </summary>
            <param name="obj">The object to check for a collision with this one.</param>
            <returns>The details of the collision or non-collision.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.RenderCollidible(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Renders the collision volume.
            </summary>
            <param name="r">Interface used to do the renderring.</param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.OnSetSmoothFilter(System.Double[])">
            <summary>
            Callback to handle setting the smoothing filter for history properties within this node.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback to handle custom renderring procedures for Presences.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ProximityToolkit.Presence.PresencePointer.OnAbsoluteChanged(ProximityToolkit.Matrix)">
            <summary>
            Callback to apply the necessary transformation to existing internal data when changing between absolute/relative mode.
            </summary>
            <param name="trans">The transformation to apply.</param>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.Location">
            <summary>
            Gets the pointer origin location.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.Velocity">
            <summary>
            Dummy property to get pointer's velocity.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.Acceleration">
            <summary>
            Dummy property to get pointer's acceleration.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.LocationHistory">
            <summary>
            Get the recent history of pointer origin locations.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.Direction">
            <summary>
            Gets or sets the direction vector of the pointer.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.DirectionHistory">
            <summary>
            Gets the recent history of direction vectors.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.TouchDistance">
            <summary>
            Gets or sets the threshold distance value along the pointer that registers as a touch.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.InclineAngle">
            <summary>
            Gets the angle from the horizontal plane.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.InclineHistory">
            <summary>
            Gets the recent history of incline values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.AzimuthAngle">
            <summary>
            Gets the angle from the X-axis, about the Y-Axis.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.AzimuthHistory">
            <summary>
            Gets the recent history of azimuth values.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.CollisionObject">
            <summary>
            Gets the collidible object for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.CollisionType">
            <summary>
            Gets the collidible type for this presence.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.PresencePointer.NodeType">
            <summary>
            Gets the node type for this presence.
            </summary>
        </member>
        <member name="T:ProximityToolkit.Presence.DisplayDecorator">
            <summary>
            Decorator to represent a collection of displays attached to a presence.
            </summary>
        </member>
        <member name="F:ProximityToolkit.Presence.DisplayDecorator.displays">
            <summary>
            Occurs when a display is removed.
            </summary>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayDecorator.GetDisplay(System.String)">
            <summary>
            Gets a new or existing display with the specified name.
            </summary>
            <param name="name">The name of the display to retrieve.</param>
            <returns>A display with the given name.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayDecorator.Update(ProximityToolkit.Presence.DecoratorUpdateArgs,System.String,ProximityToolkit.Vector3[])">
            <summary>
            Updates a particular display in this decorator.
            </summary>
            <param name="args">General update parameters.</param>
            <param name="displayname">The name of the display to update.</param>
            <param name="corners">The updated corner coordinates of the display.</param>
            <returns>True if the update was accepted.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayDecorator.OnDispatchUnhandled(System.String,System.Object,System.Boolean)">
            <summary>
            Handle creating displays based on unhandled remote updates on the decorator's root key.
            </summary>
            <param name="key">The unhandled key.</param>
            <param name="value">The unhandled value.</param>
            <param name="removed">Whether this update is a removal.</param>
            <returns>True if the update was handled by this method.</returns>
        </member>
        <member name="M:ProximityToolkit.Presence.DisplayDecorator.OnRender(ProximityToolkit.Visualization.IRenderMediator)">
            <summary>
            Callback that renders a visualization of this decorator's attributes.
            </summary>
            <param name="r">Interface to use for renderring.</param>
        </member>
        <member name="E:ProximityToolkit.Presence.DisplayDecorator.DisplayAdded">
            <summary>
            Occurs when a display is added.
            </summary>
        </member>
        <member name="P:ProximityToolkit.Presence.DisplayDecorator.Displays">
            <summary>
            The collection of displays in this decorator.
            </summary>
        </member>
    </members>
</doc>
